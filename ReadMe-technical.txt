Lokad.Cloud is intended as an infrastructure layer for cloud apps.

OVERALL DESIGN

- Lokad.Cloud.Framework is the sole assembly refered by the client app.
(ideally Lokad.Cloud.Framework does not even reference the StorageClient)

- Lokad.Cloud.Core contains the actual implementation.
(it's Lokad.Cloud.Core that interacts with the StorageClient)

- Lokad.Cloud.WorkerRole is the cloud host.

STORAGE SCHEMAS

Blob containers part of the framework:

lokad-cloud-locks
lokad-cloud-queues-metadata
lokad-cloud-queues-overflow

Queue containers part of the framework:

lokad-cloud-schedule

Table contains part of the framework:

lokad-cloud-logs

TECHNICALITIES

- autogenerated names (based on Type.FullName) might be too long for the cloud storage.
Currently, Lokad.Cloud just fails at processing them, but we should be able to provide
a smarter behavior to deal with long names.

- need to strenghten (de)serialization with starting/ending code as sanity check 
(but that could also be used to organize the serializer versionning)

- where do we apply the retry policy? directly on the storage client? and/or
within the providers themselves?

- overflowing queue items should be put into blob using the date of the date as prefix.
Though this prefix, it becomes easy to garbage collect those items 7 days afterward
if the message hasn't been processed.

- the notion of "service priority" is still pretty much undefined. Not sure how the 
priority should be defined (maybe as a the relevative weight of amount of attempts to 
process corresponding messages).

- timeouting items should not be bluntly discarded, instead they should be put into
a dedicated persistent storage (maybe a HashSet) for later processing and/or investigation.

- the Windows Azure SDK is relying on custom MsBuild tasks (.ccproj files), the files need
to be manually deployed along with the Windows Azure SDK (only shipped with the VS tools).