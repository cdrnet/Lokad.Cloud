Lokad.Cloud is intended as an infrastructure layer for cloud apps.

OVERALL DESIGN

- Lokad.Cloud.Framework is the sole assembly refered by the client app.
(ideally Lokad.Cloud.Framework does not even reference the StorageClient)

- Lokad.Cloud.Core contains the actual implementation.
(it's Lokad.Cloud.Core that interacts with the StorageClient)

- Lokad.Cloud.WorkerRole is the cloud host.

STORAGE SCHEMAS

Blob containers part of the framework:

lokad-cloud-locks
lokad-cloud-logs
lokad-cloud-overflowing-queues
lokad-cloud-services
lokad-cloud-schedule

Queue containers part of the framework:

lokad-cloud-schedule
lokad-cloud-blobsets-map
lokad-cloud-blobsets-reduce

TECHNICALITIES

- the notion of "service priority" is still pretty much undefined. Not sure how the 
priority should be defined (maybe as a the relevative weight of amount of attempts to 
process corresponding messages).

- need to strenghten the logging approach, see also
http://davidaiken.com/windows-azure/windows-azure-online-log-reader/ 

- need to better deal with incorrect cloud storage credential to provide more meaningfull error messages.

- autogenerated names (based on Type.FullName) might be too long for the cloud storage.
Currently, Lokad.Cloud just fails at processing them, but we should be able to provide
a smarter behavior to deal with long names.

- need to strenghten (de)serialization with starting/ending code as sanity check 
(but that could also be used to organize the serializer versioning).

- timeouting items should not be bluntly discarded, instead they should be put into
a dedicated persistent storage (maybe a HashSet) for later processing and/or investigation.

- the Windows Azure SDK is relying on custom MsBuild tasks (.ccproj files), the files need
to be manually deployed along with the Windows Azure SDK (only shipped with the VS tools).

LOWER PRIORITY

- (de)serialization is based on BinaryFormatter, and consequently requires full trust.
(not sure if we should not opt for another serialization method that would not force
us into full trust).