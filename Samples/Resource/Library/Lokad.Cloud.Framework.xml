<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lokad.Cloud.Framework</name>
    </assembly>
    <members>
        <member name="T:Lokad.Cloud.Services.BlobSetReduceService">
            <summary>Framework service part of Lokad.Cloud. This service is used to
            perform reduce operations starting from a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.QueueService`1">
            <summary>Strongly-type queue service (inheritors are instanciated by
            reflection on the cloud).</summary>
            <typeparam name="T">Message type</typeparam>
            <remarks>
            <para>The implementation is not constrained by the 8kb limit for <c>T</c> instances.
            If the intances are larger, the framework will wrap them into the cloud storage.</para>
            <para>Whenever possible, we suggest to design the service logic to be idempotent
            in order to make the service reliable and ultimately consistent.</para>
            </remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudService">
            <summary>Base class for cloud services.</summary>
            <remarks>Do not inherit directly from <see cref="T:Lokad.Cloud.Framework.CloudService"/>, inherit from
            <see cref="T:Lokad.Cloud.Framework.QueueService`1"/> or <see cref="T:Lokad.Cloud.Framework.ScheduledService"/> instead.</remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.CloudService._state">
            <summary>Indicates the state of the service, as retrieved during the last check.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.CloudService._lastStateCheck">
            <summary>Indicates the last time the service has checked its excution status.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Start">
            <summary>Wrapper method for the <see cref="M:Lokad.Cloud.Framework.CloudService.StartImpl"/> method. Checks
            that the service status before executing the inner start.</summary>
            <returns></returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.StartImpl">
            <summary>Called when the service is launched.</summary>
            <returns><c>true</c> if the service did actually perform an operation, and
            <c>false</c> otherwise. This value is used by the framework to adjust the
            start frequency of the respective services.</returns>
            <remarks>This method is expected to be implemented by the framework services
            not by the app services.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Stop">
            <summary>Called when the service is shut down.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1">
            <summary>Instanciate a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> based on the current
            storage providers (prefix is auto-generated based on the type <c>T</c>).</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1(System.String)">
            <summary>Instanciate a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> with the specified prefix name
            based on the current storage providers.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(``0)">
            <summary>Put one message into the queue implicitly associated to the type <c>T</c>.</summary>
            <remarks>
            The implementation is not constrained by the 8kb limit for <c>T</c> messages.
            If messages are larger, the framework will wrap them into the cloud storage.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(``0,System.String)">
            <summary>Put one message into the queue identified by <c>queueName</c>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Put messages into the queue implicitely associated to the type <c>T</c>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Put messages into the queue identified by <c>queueName</c>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetAllServices(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>Get all services instantiated through reflection.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.StateCheckInterval">
            <summary>Indicates the frequency where the service is actually checking for its state.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.Log">
            <summary>Error logger.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.Name">
            <summary>Name of the service (used for reporting purposes).</summary>
            <remarks>Default implementation returns <c>Type.FullName</c>.</remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.QueueService`1.OverflowingContainer">
            <summary>Name of the blob container used to hold overflowing messages
            from the queues.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.StartImpl">
            <summary>Do not override this method, use <see cref="M:Lokad.Cloud.Framework.QueueService`1.Start(System.Collections.Generic.IEnumerable{`0})"/>
            instead.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Start(System.Collections.Generic.IEnumerable{`0})">
            <summary>Method called by the <c>Lokad.Cloud</c> framework when messages are
            available for processing.</summary>
            <param name="messages">Messages to be processed.</param>
            <remarks>
            We suggest to make messages deleted asap through the <see cref="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)"/>
            method. Otherwise, messages will be automatically deleted when the method
            returns (except if an exception is thrown obviously).
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.GetMore(System.Int32)">
            <summary>Get more messages from the underlying queue.</summary>
            <param name="count">Maximal number of messages to be retrieved.</param>
            <returns>Retrieved messages (enumeration might be empty).</returns>
            <remarks>It is suggested to <see cref="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)"/> messages first
            before asking for more.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.GetMore``1(System.Int32,System.String)">
            <summary>Get more message from an arbitrary queue.</summary>
            <typeparam name="U">Message type.</typeparam>
            <param name="count">Number of message to be retrieved.</param>
            <param name="queueName">Name of the queue.</param>
            <returns>Retrieved message (enumeration might be empty).</returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)">
            <seealso cref="!:Delete(IEnumerable&lt;U&gt;)"/>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Delete messages retrieved either through <see cref="M:Lokad.Cloud.Framework.QueueService`1.StartImpl"/>
            or through <see cref="M:Lokad.Cloud.Framework.QueueService`1.GetMore(System.Int32)"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueService`1.Name">
            <summary>Name of the queue associated to the service.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.MessageWrapper">
            <summary>The purpose of the <see cref="T:Lokad.Cloud.Framework.MessageWrapper"/> is to gracefully
            handle messages that are too large of the queue storage (or messages that happen
            to be already stored in the Blob Storage).</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.MessageWrapper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.MessageWrapper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Serialization method.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute">
            <summary>Schedule settings for the execution of a <see cref="T:Lokad.Cloud.Framework.ScheduledService"/>.</summary>
            <remarks>The implementation is kept very simple for now. Complete scheduling,
            specifing specific hours or days will be added later on.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudServiceSettingsAttribute">
            <summary>Shared settings for all <see cref="T:Lokad.Cloud.Framework.CloudService"/>s.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.AutoStart">
            <summary>Indicates whether the service is be started by default
            when the cloud app is deployed.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.Priority">
            <summary>Define the relative priority of this service compared to the
            other services.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.Description">
            <summary>Gets a description of the service (for administration purposes).</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.ProcessingTimeout">
            <summary>Excution time-out for the <c>StartImpl</c> methods of 
            <see cref="T:Lokad.Cloud.Framework.CloudService"/> inheritors.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute.TriggerInterval">
            <summary>Indicates the interval between the scheduled executions
            (expressed in seconds).</summary>
            <remarks><c>TimeSpan</c> cannot be used here, because it's not compatible
            with the attribute usage.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledServiceState">
            <summary>Configuration state of the <seealso cref="T:Lokad.Cloud.Framework.ScheduledService"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledService">
            <summary>This cloud service is automatically called by the framework
            on scheduled basis. Scheduling options are provided through the
            <see cref="T:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute"/>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.StartImpl">
            <seealso cref="M:Lokad.Cloud.Framework.CloudService.StartImpl"/>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.StartOnSchedule">
            <summary>Called by the framework.</summary>
            <remarks>We suggest not performing any heavy processing here. In case
            of heavy processing, put a message and use <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>
            instead.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Core.IQueueStorageProvider">
            <summary>Abstraction of the Queue Storage.</summary>
            <remarks>
            This provider represents a <em>logical</em> queue, not the actual
            Queue Storage. In particular, the provider implementation deals
            with overflowing messages (that is to say messages larger than 8kb)
            on its own.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.List(System.String)">
            <summary>Gets the list of queues whose name start with the specifed prefix.</summary>
            <param name="prefix">If null or empty, returns all queues.</param>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Get``1(System.String,System.Int32)">
            <summary>Gets messages from a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue to be pulled.</param>
            <param name="count">Maximal number of messages to be retrieved.</param>
            <returns>Enumeration of messages, possibly empty.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Put``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Put message on a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue where messages are put.</param>
            <param name="messages">Messages to be put.</param>
            <remarks>If the queue does not exist, it gets created.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Clear(System.String)">
            <summary>Clear all the messages from the specified queue.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Delete``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Deletes messages from a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue where the messages are removed from.</param>
            <param name="messages">Messages to be removed.</param>
            <returns>The number of messages actually deleted.</returns>
            <remarks>Messages must have first been retrieved through <see cref="M:Lokad.Cloud.Core.IQueueStorageProvider.Get``1(System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.DeleteQueue(System.String)">
            <summary>Deletes a queue.</summary>
            <remarks><c>true</c> if the queue name has been actually deleted.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.GetApproximateCount(System.String)">
            <summary>Gets the approximate number of items in this queue.</summary>
        </member>
        <member name="T:Lokad.Cloud.Azure.DBAPI">
            <summary>
            Encrypts and decrypts data using DPAPI functions.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.InitPrompt(Lokad.Cloud.Azure.DBAPI.CRYPTPROTECT_PROMPTSTRUCT@)">
            <summary>
            Initializes empty prompt structure.
            </summary>
            <param name="ps">
            Prompt parameter (which we do not actually need).
            </param>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.InitBlob(System.Byte[],Lokad.Cloud.Azure.DBAPI.DATA_BLOB@)">
            <summary>
            Initializes a BLOB structure from a byte array.
            </summary>
            <param name="data">
            Original data in a byte array format.
            </param>
            <param name="blob">
            Returned blob structure.
            </param>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Encrypt(System.String)">
            <summary>
            Calls DPAPI CryptProtectData function to encrypt a plaintext
            string value with a user-specific key. This function does not
            specify data description and additional entropy.
            </summary>
            <param name="plainText">
            Plaintext data to be encrypted.
            </param>
            <returns>
            Encrypted value in a base64-encoded format.
            </returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Encrypt(Lokad.Cloud.Azure.DBAPI.KeyType,System.String)">
            <summary>
            Calls DPAPI CryptProtectData function to encrypt a plaintext
            string value. This function does not specify data description
            and additional entropy.
            </summary>
            <param name="keyType">
            Defines type of encryption key to use. When user key is
            specified, any application running under the same user account
            as the one making this call, will be able to decrypt data.
            Machine key will allow any application running on the same
            computer where data were encrypted to perform decryption.
            Note: If optional entropy is specifed, it will be required
            for decryption.
            </param>
            <param name="plainText">
            Plaintext data to be encrypted.
            </param>
            <returns>
            Encrypted value in a base64-encoded format.
            </returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Encrypt(Lokad.Cloud.Azure.DBAPI.KeyType,System.String,System.String)">
            <summary>
            Calls DPAPI CryptProtectData function to encrypt a plaintext
            string value. This function does not specify data description.
            </summary>
            <param name="keyType">
            Defines type of encryption key to use. When user key is
            specified, any application running under the same user account
            as the one making this call, will be able to decrypt data.
            Machine key will allow any application running on the same
            computer where data were encrypted to perform decryption.
            Note: If optional entropy is specifed, it will be required
            for decryption.
            </param>
            <param name="plainText">
            Plaintext data to be encrypted.
            </param>
            <param name="entropy">
            Optional entropy which - if specified - will be required to
            perform decryption.
            </param>
            <returns>
            Encrypted value in a base64-encoded format.
            </returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Encrypt(Lokad.Cloud.Azure.DBAPI.KeyType,System.String,System.String,System.String)">
            <summary>
            Calls DPAPI CryptProtectData function to encrypt a plaintext
            string value.
            </summary>
            <param name="keyType">
            Defines type of encryption key to use. When user key is
            specified, any application running under the same user account
            as the one making this call, will be able to decrypt data.
            Machine key will allow any application running on the same
            computer where data were encrypted to perform decryption.
            Note: If optional entropy is specifed, it will be required
            for decryption.
            </param>
            <param name="plainText">
            Plaintext data to be encrypted.
            </param>
            <param name="entropy">
            Optional entropy which - if specified - will be required to
            perform decryption.
            </param>
            <param name="description">
            Optional description of data to be encrypted. If this value is
            specified, it will be stored along with encrypted data and
            returned as a separate value during decryption.
            </param>
            <returns>
            Encrypted value in a base64-encoded format.
            </returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Encrypt(Lokad.Cloud.Azure.DBAPI.KeyType,System.Byte[],System.Byte[],System.String)">
            <summary>
            Calls DPAPI CryptProtectData function to encrypt an array of
            plaintext bytes.
            </summary>
            <param name="keyType">
            Defines type of encryption key to use. When user key is
            specified, any application running under the same user account
            as the one making this call, will be able to decrypt data.
            Machine key will allow any application running on the same
            computer where data were encrypted to perform decryption.
            Note: If optional entropy is specifed, it will be required
            for decryption.
            </param>
            <param name="plainTextBytes">
            Plaintext data to be encrypted.
            </param>
            <param name="entropyBytes">
            Optional entropy which - if specified - will be required to
            perform decryption.
            </param>
            <param name="description">
            Optional description of data to be encrypted. If this value is
            specified, it will be stored along with encrypted data and
            returned as a separate value during decryption.
            </param>
            <returns>
            Encrypted value.
            </returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Decrypt(System.String)">
            <summary>
            Calls DPAPI CryptUnprotectData to decrypt ciphertext bytes.
            This function does not use additional entropy and does not
            return data description.
            </summary>
            <param name="cipherText">
            Encrypted data formatted as a base64-encoded string.
            </param>
            <returns>
            Decrypted data returned as a UTF-8 string.
            </returns>
            <remarks>
            When decrypting data, it is not necessary to specify which
            type of encryption key to use: user-specific or
            machine-specific; DPAPI will figure it out by looking at
            the signature of encrypted data.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Decrypt(System.String,System.String@)">
            <summary>
            Calls DPAPI CryptUnprotectData to decrypt ciphertext bytes.
            This function does not use additional entropy.
            </summary>
            <param name="cipherText">
            Encrypted data formatted as a base64-encoded string.
            </param>
            <param name="description">
            Returned description of data specified during encryption.
            </param>
            <returns>
            Decrypted data returned as a UTF-8 string.
            </returns>
            <remarks>
            When decrypting data, it is not necessary to specify which
            type of encryption key to use: user-specific or
            machine-specific; DPAPI will figure it out by looking at
            the signature of encrypted data.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Decrypt(System.String,System.String,System.String@)">
            <summary>
            Calls DPAPI CryptUnprotectData to decrypt ciphertext bytes.
            </summary>
            <param name="cipherText">
            Encrypted data formatted as a base64-encoded string.
            </param>
            <param name="entropy">
            Optional entropy, which is required if it was specified during
            encryption.
            </param>
            <param name="description">
            Returned description of data specified during encryption.
            </param>
            <returns>
            Decrypted data returned as a UTF-8 string.
            </returns>
            <remarks>
            When decrypting data, it is not necessary to specify which
            type of encryption key to use: user-specific or
            machine-specific; DPAPI will figure it out by looking at
            the signature of encrypted data.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.DBAPI.Decrypt(System.Byte[],System.Byte[],System.String@)">
            <summary>
            Calls DPAPI CryptUnprotectData to decrypt ciphertext bytes.
            </summary>
            <param name="cipherTextBytes">
            Encrypted data.
            </param>
            <param name="entropyBytes">
            Optional entropy, which is required if it was specified during
            encryption.
            </param>
            <param name="description">
            Returned description of data specified during encryption.
            </param>
            <returns>
            Decrypted data bytes.
            </returns>
            <remarks>
            When decrypting data, it is not necessary to specify which
            type of encryption key to use: user-specific or
            machine-specific; DPAPI will figure it out by looking at
            the signature of encrypted data.
            </remarks>
        </member>
        <member name="T:Lokad.Cloud.Azure.DBAPI.KeyType">
            <summary>Flag indicating the type of key. DPAPI terminology refers to
            key types as user store or machine store.</summary>
        </member>
        <member name="F:Lokad.Cloud.Azure.DBAPI.KeyType.UserKey">
            <summary>User store.</summary>
        </member>
        <member name="F:Lokad.Cloud.Azure.DBAPI.KeyType.MachineKey">
            <summary>Machine store.</summary>
        </member>
        <member name="T:Lokad.Cloud.Azure.ServiceBalancerCommand">
            <summary>Organize the executions of the services.</summary>
        </member>
        <member name="F:Lokad.Cloud.Azure.ServiceBalancerCommand.IdleSleep">
            <summary>Resting duration expressed in seconds.</summary>
        </member>
        <member name="M:Lokad.Cloud.Azure.ServiceBalancerCommand.Stop">
            <summary>Stops all services.</summary>
        </member>
        <member name="T:Lokad.Cloud.Core.ITypeMapperProvider">
            <summary>Convert types into identifier and vice-versa. The purpose of this 
            interface is to support implicit cloud storage names for processed items.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.ITypeMapperProvider.GetStorageName(System.Type)">
            <summary>Gets the identifier associated to the specifed type.</summary>
        </member>
        <member name="T:Lokad.Cloud.Core.IBlobStorageProvider">
            <summary>Abstraction for the Blob Storage.</summary>
            <remarks>
            This provider represents a <em>logical</em> blob storage, not the actual
            Blob Storage. In particular, this provider deals with overflowing buffers
            that need to be split in smaller chuncks to be uploaded.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.CreateContainer(System.String)">
            <summary>Creates a new blob container.</summary>
            <returns><c>true</c> if the container was actually created and false if
            the container already exists.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.DeleteContainer(System.String)">
            <summary>Delete a container.</summary>
            <remarks>Returns <c>true</c> if the container has been actually deleted.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.PutBlob``1(System.String,System.String,``0)">
            <summary>Puts a blob (overwrite if the blob already exists).</summary>
            <remarks>Creates the container if it does not exist beforehand.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.PutBlob``1(System.String,System.String,``0,System.Boolean)">
            <summary>Puts a blob and optionally overwrite.</summary>
            <remarks>Creates the container if it does not exist beforehand.</remarks>
            <returns><c>true</c> if the blob has been put and false if the blob already
            exists but could not be overwritten.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.GetBlob``1(System.String,System.String)">
            <summary>Gets a blob.</summary>
            <returns>If there is no such blob, a <c>null</c> (or a default value) is
            returned.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}},Lokad.Result{``0}@)">
            <summary>Update a blob while garantying an atomic update process.</summary>
            <param name="containerName"></param>
            <param name="blobName"></param>
            <param name="updater">The function is returning a <see cref="T:Lokad.Result`1"/>
            because the updater can optionally decide not to succeed with the update
            (in case where the update no more relevant for example.</param>
            <param name="result">Result returned by the updated.</param>
            <returns><c>true</c> if the update is successful.
            If the blob is updated between the retrieval and the update attempt,
            then no update is performed and the method returns <c>false</c>.</returns>
            <remarks>If there is not such blob available, the update is performed with
            the default <c>T</c> value.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,``0},``0@)">
            <seealso cref="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}},Lokad.Result{``0}@)"/>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}})">
            <summary>Update a blob while garantying an atomic update process.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,``0})">
            <seealso cref="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}})"/>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.DeleteBlob(System.String,System.String)">
            <summary>Deletes a blob.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.List(System.String,System.String)">
            <summary>Iterates over the blobs considering the specified prefix.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.Services.QueueOverflowCollectorService.Name">
            <remarks>Name is override for consistency in the framework.</remarks>
        </member>
        <member name="T:GlobalAssemblyInfo">
            <summary>
             Assembly information class that is shared between all projects
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Azure.BlobStorageProvider">
            <summary>Provides access to the Blob Storage.</summary>
            <remarks>
            All the methods of <see cref="T:Lokad.Cloud.Azure.BlobStorageProvider"/> are thread-safe.
            </remarks>
        </member>
        <member name="T:Lokad.Cloud.Azure.QueueStorageProvider">
            <summary>Provides access to the Queue Storage (plus the Blob Storage when
            messages are overflowing).</summary>
            <remarks>
            <para>
            Overflowing messages are stored in blob storage and normally deleted as with
            their originating correspondance in queue storage. Yet if messages aren't processed
            in 7 days, then, they should be removed.
            </para>
            <para>
            The pattern for blobname of overflowing message is:
            <c>ExpirationDate / QueuName / GUID</c> 
            </para>
            <para>All the methods of <see cref="T:Lokad.Cloud.Azure.QueueStorageProvider"/> are thread-safe.</para>
            </remarks>
        </member>
        <member name="F:Lokad.Cloud.Azure.QueueStorageProvider._sync">
            <summary>Root used to synchronize accesses to <c>_inprocess</c>. 
            Caution: do not hold the lock while performing operations on the cloud
            storage.</summary>
        </member>
        <member name="M:Lokad.Cloud.Azure.QueueStorageProvider.#ctor(Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage,Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage,Lokad.ActionPolicy,System.Runtime.Serialization.IFormatter)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Azure.QueueStorageProvider.GetNewBlobName(System.String)">
            <summary>
            Naming is following a date pattern to facilitate cleaning later on.
            </summary>
            <remarks>
            The date specified by the blob name prefix correspond to the expiration
            date of the overflowing message.
            </remarks>
        </member>
        <member name="T:Lokad.Cloud.Azure.LogEntry">
            <summary>Log entry (when retrieving logs with the <see cref="T:Lokad.Cloud.Azure.CloudLogger"/>.
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Azure.CloudLogger">
            <summary>Logger built on top of the Blob Storage.</summary>
            <remarks>
            Logs are formatted in XML with
            <code>
            &lt;log&gt;
              &lt;message&gt; {0} &lt;/message&gt;
              &lt;error&gt; {1} &lt;/error&gt;
            &lt;/log&gt;
            </code>
            
            Also, the logger is relying on date prefix in order to facilitate large
            scale enumeration of the logs. Yet, in order to facilitate fast enumeration
            of recent logs, an prefix inversion trick is used.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.CloudLogger.GetRecentLogs">
            <summary>Lazily enumerates over the entire logs.</summary>
            <returns></returns>
        </member>
        <member name="M:Lokad.Cloud.Azure.CloudLogger.ToPrefix(System.DateTime)">
            <summary>Time prefix with inversion in order to enumerate
            starting from the most recent.</summary>
            <remarks>This method is the symmetric of <see cref="M:Lokad.Cloud.Azure.CloudLogger.ToDateTime(System.String)"/>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.CloudLogger.ToDateTime(System.String)">
            <summary>Convert a prefix with inversion into a <c>DateTime</c>.</summary>
            <remarks>This method is the symmetric of <see cref="M:Lokad.Cloud.Azure.CloudLogger.ToPrefix(System.DateTime)"/>.</remarks>
        </member>
        <member name="P:Lokad.Cloud.Azure.CloudLogger.LogLevelThreshold">
            <summary>Minimal log level (inclusive), below this level,
            notifications are ignored.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ProvidersForCloudStorage">
            <summary>IoC argument for <see cref="T:Lokad.Cloud.Framework.CloudService"/> and other
            cloud abstractions.</summary>
            <remarks>This argument will be populated through Inversion Of Control (IoC)
            by the Lokad.Cloud framework itself. This class is placed in the
            <c>Lokad.Cloud.Framework</c> for convenience while inheriting a
            <see cref="T:Lokad.Cloud.Framework.CloudService"/>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.ProvidersForCloudStorage.#ctor(Lokad.Cloud.Core.IBlobStorageProvider,Lokad.Cloud.Core.IQueueStorageProvider,Lokad.ILog,Lokad.Cloud.Core.ITypeMapperProvider)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.BlobStorage">
            <summary>Abstracts the Blob Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.QueueStorage">
            <summary>Abstracts the Queue Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.Log">
            <summary>Error Logger</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.TypeMapper">
            <summary>Type mapper for implicit cloud storage.</summary>
        </member>
        <member name="T:Lokad.Cloud.Services.BlobSetMapMessage">
            <summary>Elementary mapping to be performed by the <see cref="T:Lokad.Cloud.Services.BlobSetMapService"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.SourcePrefix">
            <summary>Prefix associated to the input <c>BlobSet</c>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.DestinationPrefix">
            <summary>Prefix associated to the output <c>BlobSet</c>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.ItemSuffix">
            <summary>Suffix associated to the item being considered.</summary>
        </member>
        <member name="T:Lokad.Cloud.Services.BlobSetMapService">
            <summary>Framework service part of Lokad.Cloud. This service is used to
            perform map operations between <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.QueueServiceSettingsAttribute">
            <summary>Default settings for the <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>. Once the queue
            service is deployed, settings are stored in the <c>lokad-cloud-queues</c> blob
            container.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueServiceSettingsAttribute.QueueName">
            <summary>Name of the queue attached to the <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>.</summary>
            <remarks>If this value is null or empty, a default queue name is chosen based
            on the type <c>T</c>.</remarks>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueServiceSettingsAttribute.BatchSize">
            <summary>Suggested size for batch retrieval of messages.</summary>
            <remarks>The maximal value is 1000. We suggest to retrieve small messages
            in batch to reduce network overhead.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Azure.StorageModule">
            <summary>IoC module that auto-load <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo"/>, 
            <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage"/> and <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage"/> from the 
            properties.</summary>
        </member>
        <member name="P:Lokad.Cloud.Azure.StorageModule.AccountName">
            <summary>Account name of the Azure Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Azure.StorageModule.AccountKey">
            <summary>Key to access the Azure Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Azure.StorageModule.IsStorageKeyEncrypted">
            <summary>Indicates whether the account key is encrypted with DBAPI.</summary>
        </member>
        <member name="P:Lokad.Cloud.Azure.StorageModule.BlobEndpoint">
            <summary>URL of the Blob Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Azure.StorageModule.QueueEndpoint">
            <summary>URL of the Queue Storage.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudServiceState">
            <summary>Status flag for <see cref="T:Lokad.Cloud.Framework.CloudService"/>s.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobLocator">
            <summary>Item locator for <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> collection.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSetMapSettings">
            <summary>Settings of a map operation.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetMapSettings.Mapper">
            <summary>Underlying type is expected to be <see cref="T:System.Func`2"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSetReduceSettings">
            <summary>Settings of a reduce operation.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.Reducer">
            <summary>Underlying type is expected to be <see cref="T:System.Func`3"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.WorkQueue">
            <summary>Name of the queue dedicated to reduction process.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReductionQueue">
            <summary>Name of the queue where the final reduction should be put.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReductionCounter">
            <summary>Suffix of the blob that contains the reduction counter.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReducerInQueueCounter">
            <summary>Suffix of the blob that contains a counter of number of worker.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSet`1">
            <summary>The <c>BlobSet</c> is a blob-based scalable collection that
            provides scalable iterators (basically mappers and reducers).</summary>
            <typeparam name="T">Type being enumerated.</typeparam>
            <remarks>
            <para>The <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> should be instanciated through the
            <see cref="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1"/>. This pattern has been chosen
            because the <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> needs arguments passed to the service
            through IoC.
            </para>
            <para>All <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>s are stored in a single blob containers.
            They are separated through the usage of a blob name prefix.
            </para>
            <para>
            Items put in a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> are giving pseudo-random names.
            The pseudo-random pattern is used for fast iteration.
            </para>
            </remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.ContainerName">
            <summary>Name of the container for all the blobsets.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.Delimiter">
            <summary>Delimiter used for prefixing iterations on Blob Storage.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.MapSettingsSuffix">
            <summary>Blob name used to store the mapping during a map operation.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.MapCounterSuffix">
            <summary>Blob name used to store the number of remaining mappings during
            a map operation.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.ReduceCounterSuffix">
            <summary>Blob name used to store the number of remaining reductions during
            a reduce operation.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage,System.String)">
            <summary>Constructor that specifies the <see cref="P:Lokad.Cloud.Framework.BlobSet`1.Prefix"/>.</summary>
            <remarks>The container name is based on the type <c>T</c>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.MapToBlobSet``2(System.String,System.Func{`0,``0},``1)">
            <summary>Apply the specified mapping to all items of this collection.</summary>
            <param name="destPrefix">Prefix to be used for the destination <c>BlobSet</c>.</param>
            <typeparam name="U">Output type of the mapped items.</typeparam>
            <typeparam name="M">Output type of the termination message.</typeparam>
            <param name="mapper">Mapping function (should be serializable).</param>
            <param name="onCompleted">Message pushed when the mapping is completed.</param>
            <remarks>This method is asynchronous.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.MapToBlobSet``2(System.String,System.Func{`0,``0},``1,System.String)">
            <summary>Apply the specified mapping  to all items of this collection.</summary>
            <param name="destPrefix">Prefix to be used for the destination <c>BlobSet</c>.</param>
            <typeparam name="U">Output type of the mapped items.</typeparam>
            <typeparam name="M">Output type of the termination message.</typeparam>
            <param name="mapper">Mapping function (should be serializable).</param>
            <param name="onCompletedQueueName">Identifier of the queue where the termination message is put.</param>
            <remarks>
            This method is asynchronous.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.ReduceToQueue``1(System.Func{``0,``0,``0})">
            <summary>Apply a reducing function and outputs to the queue
            implicitely selected based on the type <c>U</c>.</summary>
            <typeparam name="U">Reduction type.</typeparam>
            <param name="reducer">Reducing function.</param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.ReduceToQueue``1(System.Func{``0,``0,``0},System.String)">
            <summary>Apply a reducing function and outputs to the queue specified.</summary>
            <typeparam name="U">Reduction type.</typeparam>
            <param name="reducer">Reduction type.</param>
            <param name="queueName">Identifier the output queue.</param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Add(`0)">
            <summary>Adds an item and returns the corresponding blob identifier.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Remove(Lokad.Cloud.Framework.BlobLocator)">
            <summary>Removes an item based on its identifier.</summary>
            <returns><c>true</c> if the blob was successfully removed and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Clear">
            <summary>Remove all items from within the collection. Method is asynchronous,
            it returns immediately once the deletion task is queued.</summary>
            <remarks>Considering that the <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> is nothing
            but a list of prefixed blobs in a container of the Blob Storage,
            clearing the collection is equivalent to deleting the collection.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.GetNewItemBlobName">
            <summary>Get a new blob name including the prefix, the pseudo-random pattern plus
            the Guid. Those names are choosen to avoid collision and facilitate fast iteration.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.RetryUpdate(System.Func{System.Boolean})">
            <summary>Retry an update method until it succeeds. Timing
            increases to avoid overstressing the storage for nothing.</summary>
            <param name="func"></param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.InvokeAsDelegate(System.Object,System.Object[])">
            <summary>Use reflection to invoke a delegate.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSet`1.Prefix">
            <summary>Storage prefix for this collection.</summary>
            <remarks>This identifier is used as <em>prefix</em> through the blob storage
            in order to iterate through the collection.</remarks>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSet`1.Item(Lokad.Cloud.Framework.BlobLocator)">
            <summary>Retrieves an item based on the blob identifier.</summary>
        </member>
        <member name="T:Lokad.Cloud.Azure.TypeMapperProvider">
            <summary>Maps types to storage names, and vice-versa.</summary>
            <remarks>
            Spec on queue names: http://msdn.microsoft.com/en-us/library/dd179349.aspx
            Spec on container names: http://msdn.microsoft.com/en-us/library/dd135715.aspx
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Azure.TypeMapperProvider.GetStorageName(System.Type)">
            <see cref="M:Lokad.Cloud.Core.ITypeMapperProvider.GetStorageName(System.Type)"/>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents">
            <summary>
            This type represents the different constituent parts that make up a resource Uri in the context of cloud services.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a ResourceUriComponents object.
            </summary>
            <param name="accountName">The account name that should become part of the URI.</param>
            <param name="containerName">The container name (container, queue or table name) that should become part of the URI.</param>
            <param name="remainingPart">Remaining part of the URI.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.#ctor(System.String,System.String)">
            <summary>
            Construct a ResourceUriComponents object.        
            </summary>
            <param name="accountName">The account name that should become part of the URI.</param>
            <param name="containerName">The container name (container, queue or table name) that should become part of the URI.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.#ctor(System.String)">
            <summary>
            Construct a ResourceUriComponents object.        
            </summary>
            <param name="accountName">The account name that should become part of the URI.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.#ctor">
            <summary>
            Construct a ResourceUriComponents object.        
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.AccountName">
            <summary>
            The account name in the URI.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.ContainerName">
            <summary>
            This is really the first component (delimited by '/') after the account name. Since it happens to
            be a container name in the context of all our storage services (containers in blob storage,
            queues in the queue service and table names in table storage), it's named as ContainerName to make it more 
            readable at the cost of slightly being incorrectly named.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents.RemainingPart">
            <summary>
            The remaining string in the URI.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizeHttpRequest(System.Uri,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create a canonicalized string out of HTTP request header contents for signing 
            blob/queue requests with the Shared Authentication scheme. 
            </summary>
            <param name="address">The uri address of the HTTP request.</param>
            <param name="uriComponents">Components of the Uri extracted out of the request.</param>
            <param name="method">The method of the HTTP request (GET/PUT, etc.).</param>
            <param name="contentType">The content type of the HTTP request.</param>
            <param name="date">The date of the HTTP request.</param>
            <param name="headers">Should contain other headers of the HTTP request.</param>
            <returns>A canonicalized string of the HTTP request.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizeHttpRequest(System.Net.HttpWebRequest,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents)">
            <summary>
            Canonicalize HTTP header contents.
            </summary>
            <param name="request">An HttpWebRequest object.</param>
            <param name="uriComponents">Components of the Uri extracted out of the request.</param>
            <returns>The canonicalized string of the given HTTP request's header.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.ConvertDateTimeToHttpString(System.DateTime)">
            <summary>
            Creates a standard datetime string for the shared key lite authentication scheme.
            </summary>
            <param name="dateTime">DateTime value to convert to a string in the expected format.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizedString">
            <summary>
            An internal class that stores the canonicalized string version of an HTTP request.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizedString.#ctor(System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="initialElement">The first canonicalized element to start the string with.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizedString.AppendCanonicalizedElement(System.String)">
            <summary>
            Append additional canonicalized element to the string.
            </summary>
            <param name="element">An additional canonicalized element to append to the string.</param>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageCanonicalizer.CanonicalizedString.Value">
            <summary>
            Property for the canonicalized string.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor">
            <summary>
            Use this class to extract various header values from Http requests.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor.GetHeaderValues(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            A helper function for extracting HTTP header values from a NameValueCollection object.
            </summary>
            <param name="headers">A NameValueCollection object that should contain HTTP header name-values pairs.</param>
            <param name="headerName">Name of the header that we want to get values of.</param>
            <returns>A array list of values for the header. The values are in the same order as they are stored in the NameValueCollection object.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor.ConstructResourceUri(System.Uri,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents,System.Boolean)">
            <summary>
            Constructs an URI given all its constituents
            </summary>
            <param name="endpoint">
            This is the service endpoint in case of path-style URIs and a host suffix in case of host-style URIs
            IMPORTANT: This does NOT include the service name or account name
            </param>
            <param name="uriComponents">Uri constituents</param>
            <param name="pathStyleUri">Indicates whether to construct a path-style Uri (true) or host-style URI (false)</param>
            <returns>Full uri</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor.ConstructPathStyleResourceUri(System.Uri,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents)">
            <summary>
            Constructs a path-style resource URI given all its constituents
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor.ConstructHostStyleResourceUri(System.Uri,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents)">
            <summary>
            Constructs a host-style resource URI given all its constituents
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.HttpRequestAccessor.ConstructHostStyleAccountUri(System.Uri,System.String)">
            <summary>
            Given the host suffix part, service name and account name, this method constructs the account Uri
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.SharedKeyCredentials">
            <summary>
            Objects of this class contain the credentials (name and key) of a storage account.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.SharedKeyCredentials.#ctor(System.String,System.Byte[])">
            <summary>
            Create a SharedKeyCredentials object given an account name and a shared key.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.SharedKeyCredentials.SignRequest(System.Net.HttpWebRequest,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents)">
            <summary>
            Signs the request appropriately to make it an authenticated request.
            Note that this method takes the URI components as decoding the URI components requires the knowledge
            of whether the URI is in path-style or host-style and a host-suffix if it's host-style.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.SharedKeyCredentials.SignRequestForSharedKeyLite(System.Net.HttpWebRequest,Microsoft.Samples.ServiceHosting.StorageClient.ResourceUriComponents)">
            <summary>
            Signs requests using the SharedKeyLite authentication scheme with is used for the table storage service.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicy">
            <summary>
            This delegate define the shape of a retry policy. A retry policy will invoke the given
            <paramref name="action"/> as many times as it wants to in the face of 
            retriable StorageServerExceptions.
            </summary>
            <param name="action">The action to retry</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage">
            <summary>
            The entry point of the blob storage API
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.Create(System.Uri,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Factory method for BlobStorage
            </summary>
            <param name="baseUri">The base URI of the blob storage service</param>
            <param name="usePathStyleUris">If true, path-style URIs (http://baseuri/accountname/containername/objectname) are used.
            If false host-style URIs (http://accountname.baseuri/containername/objectname) are used,
            where baseuri is the URI of the service.
            If null, the choice is made automatically: path-style URIs if host name part of base URI is an 
            IP addres, host-style otherwise.</param>
            <param name="accountName">The name of the storage account</param>
            <param name="base64Key">Authentication key used for signing requests</param>
            <returns>A newly created BlobStorage instance</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.Create(Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo)">
            <summary>
            Factory method for BlobStorage
            </summary>
            <param name="accountInfo">Account information</param>
            <returns>A newly created BlobStorage instance</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.GetBlobContainer(System.String)">
            <summary>
            Get a reference to a newly created BlobContainer object.
            This method does not make any calls to the storage service.
            </summary>
            <param name="containerName">The name of the container</param>
            <returns>A reference to a newly created BlobContainer object</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.ListBlobContainers">
            <summary>
            Lists the containers within the account.
            </summary>
            <returns>A list of containers</returns>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.DefaultTimeout">
            <summary>
            The default timeout
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.DefaultRetryPolicy">
            <summary>
            The default retry policy
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.Timeout">
            <summary>
            The time out for each request to the storage service.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.BaseUri">
            <summary>
            The base URI of the blob storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.AccountName">
            <summary>
            The name of the storage account
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorage.UsePathStyleUris">
            <summary>
            Indicates whether to use/generate path-style or host-style URIs
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicies">
            <summary>
            Provides definitions for some standard retry policies.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicies.NoRetry(System.Action)">
            <summary>
            Policy that does no retries i.e., it just invokes <paramref name="action"/> exactly once
            </summary>
            <param name="action">The action to retry</param>
            <returns>The return value of <paramref name="action"/></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicies.RetryN(System.Int32,System.TimeSpan)">
            <summary>
            Policy that retries a specified number of times with a specified fixed time interval between retries
            </summary>
            <param name="numberOfRetries">The number of times to retry. Should be a non-negative number</param>
            <param name="intervalBetweenRetries">The time interval between retries. Use TimeSpan.Zero to specify immediate
            retries</param>
            <returns></returns>
            <remarks>When <paramref name="numberOfRetries"/> is 0 and <paramref name="intervalBetweenRetries"/> is
            TimeSpan.Zero this policy is equivalent to the NoRetry policy</remarks>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.ContainerAccessControl">
            <summary>
            Access control for containers
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer">
            <summary>
            The blob container class.
            Used to access and enumerate blobs in the container.
            Storage key credentials are needed to access private blobs but not for public blobs.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Use this constructor to access private blobs.
            </summary>
            <param name="baseUri">The base Uri for the storage endpoint</param>
            <param name="accountName">Name of the storage account</param>
            <param name="containerName">Name of the container</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.#ctor(System.Uri,System.Boolean,System.String,System.String,System.DateTime)">
            <summary>
            Use this constructor to access private blobs.
            </summary>
            <param name="baseUri">The base Uri for the storage endpoint</param>
            <param name="usePathStyleUris">
            If true, path-style URIs (http://baseuri/accountname/containername/objectname) are used and if false 
            host-style URIs (http://accountname.baseuri/containername/objectname) are used, where baseuri is the 
            URI of the service
            </param>
            <param name="accountName">Name of the storage account</param>
            <param name="containerName">Name of the container</param>
            <param name="lastModified">Date of last modification</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.CreateContainer">
            <summary>
            Create the container if it does not exist.
            The container is created with private access control and no metadata.
            </summary>
            <returns>true if the container was created. false if the container already exists</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.CreateContainer(System.Collections.Specialized.NameValueCollection,Microsoft.Samples.ServiceHosting.StorageClient.ContainerAccessControl)">
            <summary>
            Create the container with the specified metadata and access control if it does not exist
            </summary>
            <param name="metadata">The metadata for the container. Can be null to indicate no metadata</param>
            <param name="accessControl">The access control (public or private) with which to create the container</param>
            <returns>true if the container was created. false if the container already exists</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.DoesContainerExist">
            <summary>
            Check if the blob container exists
            </summary>
            <returns>true if the container exists, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.GetContainerProperties">
            <summary>
            Get the properties for the container if it exists.
            </summary>
            <returns>The properties for the container if it exists, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.GetContainerAccessControl">
            <summary>
            Get the access control permissions associated with the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.SetContainerAccessControl(Microsoft.Samples.ServiceHosting.StorageClient.ContainerAccessControl)">
            <summary>
            Set the access control permissions associated with the container.
            </summary>
            <param name="acl">The permission to set</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.DeleteContainer">
            <summary>
            Deletes the current container.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.DoesBlobExist(System.String)">
            <summary>
            Check if the blob container exists
            </summary>
            <param name="blobName">Name of the BLOB.</param>
            <returns>true if the blob exists, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.CreateBlob(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Create a new blob or overwrite an existing blob.
            </summary>
            <param name="blobProperties">The properties of the blob</param>
            <param name="blobContents">The contents of the blob</param>
            <param name="overwrite">Should this request overwrite an existing blob ?</param>
            <returns>true if the blob was created. false if the blob already exists and <paramref name="overwrite"/>was set to false</returns>
            <remarks>The LastModifiedTime property of <paramref name="blobProperties"/> is set as a result of this call.
            This method also has an effect on the ETag values that are managed by the service.</remarks>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.UpdateBlobIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents)">
            <summary>
            Updates an existing blob if it has not been modified since the specified time which is typically
            the last modified time of the blob when you retrieved it.
            Use this method to implement optimistic concurrency by avoiding clobbering changes to the blob
            made by another writer.
            </summary>
            <param name="blob">The properties of the blob. This object should be one previously
            obtained from a call to GetBlob or GetBlobProperties and have its LastModifiedTime property set.</param>
            <param name="contents">The contents of the blob. The contents of the blob should be readable</param>
            <returns>true if the blob was updated. false if the blob has changed since the last time</returns>
            <remarks>The LastModifiedTime property of <paramref name="blob"/> is set as a result of this call.
            This method also has an effect on the ETag values that are managed by the service if the update was 
            successful.</remarks>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.GetBlob(System.String,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Get the blob contents and properties if the blob exists
            </summary>
            <param name="name">The name of the blob</param>
            <param name="blobContents">Object in which the contents are returned.
            This object should contain a writable stream or should be a default constructed object.</param>
            <param name="transferAsChunks">Should the blob be gotten in pieces. This requires more round-trips, but will retry smaller pieces in case of failure.</param>
            <returns>The properties of the blob if the blob exists.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.GetBlobIfModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Gets the blob contents and properties if the blob has not been modified since the time specified.
            Use this method if you have cached the contents of a blob and want to avoid retrieving the blob
            if it has not changed since the last time you retrieved it.
            </summary>
            <param name="blobProperties">The properties of the blob obtained from an earlier call to GetBlob. This
            parameter is updated by the call if the blob has been modified</param>
            <param name="blobContents">Contains the stream to which the contents of the blob are written if it has been
            modified</param>
            <param name="transferAsChunks">Should the blob be gotten in pieces. This requires more round-trips, but will retry smaller pieces in case of failure.</param>
            <returns>true if the blob has been modified, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.GetBlobProperties(System.String)">
            <summary>
            Get the properties of the blob if it exists.
            This method is also the simplest way to check if a blob exists.
            </summary>
            <param name="name">The name of the blob</param>
            <returns>The properties of the blob if it exists. null otherwise.
            The properties for the contents of the blob are not set</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.UpdateBlobMetadata(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties)">
            <summary>
            Set the metadata of an existing blob.
            </summary>
            <param name="blobProperties">The blob properties object whose metadata is to be updated</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.UpdateBlobMetadataIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties)">
            <summary>
            Set the metadata of an existing blob if it has not been modified since it was last retrieved.
            </summary>
            <param name="blobProperties">The blob properties object whose metadata is to be updated.
            Typically obtained by a previous call to GetBlob or GetBlobProperties</param>
            <returns>true if the blob metadata was updated. false if it was not updated because the blob
            has been modified</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.DeleteBlob(System.String)">
            <summary>
            Delete a blob with the given name
            </summary>
            <param name="name">The name of the blob</param>
            <returns>true if the blob exists and was successfully deleted, false if the blob does not exist</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.DeleteBlobIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,System.Boolean@)">
            <summary>
            Delete a blob with the given name if the blob has not been modified since it was last obtained.
            Use this method for optimistic concurrency to avoid deleting a blob that has been modified since
            the last time you retrieved it
            </summary>
            <param name="blob">A blob object (typically previously obtained from a GetBlob call)</param>
            <param name="modified">This out parameter is set to true if the blob was not deleted because
            it was modified</param>
            <returns>true if the blob exists and was successfully deleted, false if the blob does not exist or was
            not deleted because the blob was modified.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.ListBlobs(System.String,System.Boolean)">
            <summary>
            Enumerates all blobs with a given prefix.
            </summary>
            <param name="prefix"></param>
            <param name="combineCommonPrefixes">If true common prefixes with "/" as seperator</param>
            <returns>The list of blob properties and common prefixes</returns>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.Timeout">
            <summary>
            The time out for each request to the storage service.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.BaseUri">
            <summary>
            The base URI of the blob storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.AccountName">
            <summary>
            The name of the storage account
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.ContainerName">
            <summary>
            The name of the blob container.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.UsePathStyleUris">
            <summary>
            Indicates whether to use/generate path-style or host-style URIs
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.ContainerUri">
            <summary>
            The URI of the container
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainer.LastModifiedTime">
            <summary>
            The timestamp for last modification of container.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties">
            <summary>
            The properties of a blob.
            No member of this class makes a storage service request.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.#ctor(System.String)">
            <summary>
            Construct a new BlobProperties object
            </summary>
            <param name="name">The name of the blob</param>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.Name">
            <summary>
            Name of the blob
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.Uri">
            <summary>
            URI of the blob
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.ContentEncoding">
            <summary>
            Content encoding of the blob if it set, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.ContentType">
            <summary>
            Content Type of the blob if it is set, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.ContentLanguage">
            <summary>
            Content Language of the blob if it is set, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.ContentLength">
            <summary>
            The length of the blob content, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.Metadata">
            <summary>
            Metadata for the blob in the form of name-value pairs.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.LastModifiedTime">
            <summary>
            The last modified time for the blob. 
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties.ETag">
            <summary>
            The ETag of the blob. This is an identifier assigned to the blob by the storage service
            and is used to distinguish contents of two blobs (or versions of the same blob).
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.ContainerProperties">
            <summary>
            The properties of a container.
            No member of this class makes a storage service request.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobContents">
            <summary>
            The contents of the Blob in various forms.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContents.#ctor(System.IO.Stream)">
            <summary>
            Construct a new BlobContents object from a stream.
            </summary>
            <param name="stream">The stream to/from which blob contents are written/read. The
            stream should be seekable in order for requests to be retried.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContents.#ctor(System.Byte[])">
            <summary>
            Construct a new BlobContents object from a byte array.
            </summary>
            <param name="value">The byte array to/from which contents are written/read.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContents.AsBytes">
            <summary>
            Get the contents of a blob as a byte array.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.BlobContents.AsStream">
            <summary>
            Get the contents of a blob as a stream.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageErrorCode">
            <summary>
            Error codes that can be returned by the storage service or the client library.
            These are divided into server errors and client errors depending on which side
            the error can be attributed to.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageException">
            <summary>
            The base class for storage service exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageException"/> class with
            serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object
            data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information
            about the source or destionation. </param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with additional exception information
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that holds the 
            serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information
            about the source or destionation. </param>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageException.StatusCode">
            <summary>
            The Http status code returned by the storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageException.ErrorCode">
            <summary>
            The specific error code returned by the storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageException.ExtendedErrorInformation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageServerException">
            <summary>
            Server exceptions are those due to server side problems.
            These may be transient and requests resulting in such exceptions
            can be retried with the same parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageServerException"/> class with
            serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object
            data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information
            about the source or destionation. </param>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageClientException">
            <summary>
            Client side exceptions are due to incorrect parameters to the request.
            These requests should not be retried with the same parameters
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageClientException"/> class with
            serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object
            data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information
            about the source or destionation. </param>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageErrorCodeStrings">
            <summary>
            Error code strings that are common to all storage services
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.BlobErrorCodeStrings">
            <summary>
            Error code strings that are specific to blob service
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.QueueErrorCodeStrings">
            <summary>
            Error code strings that are specific to queue service
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableErrorCodeStrings">
            <summary>
            Error code strings that are specific to queue service
            </summary>
                public static class TableErrorCodeStrings
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Utilities.ConvertDateTimeToHttpString(System.DateTime)">
            <summary>
            Converts the date time to a valid string form as per HTTP standards
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Utilities.TryGetDateTimeFromHttpString(System.String,System.Nullable{System.DateTime}@)">
            <summary>
            Parse a string having the date time information in acceptable formats according to HTTP standards
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Utilities.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies from one stream to another
            </summary>
            <param name="sourceStream">The stream to copy from</param>
            <param name="destinationStream">The stream to copy to</param>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage">
            <summary>
            The entry point of the queue storage API
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.Create(System.Uri,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Factory method for QueueStorage
            </summary>
            <param name="baseUri">The base URI of the queue service</param>
            <param name="usePathStyleUris">If true, path-style URIs (http://baseuri/accountname/containername/objectname) are used.
            If false host-style URIs (http://accountname.baseuri/containername/objectname) are used,
            where baseuri is the URI of the service.
            If null, the choice is made automatically: path-style URIs if host name part of base URI is an 
            IP addres, host-style otherwise.</param>
            <param name="accountName">The name of the storage account</param>
            <param name="base64Key">Authentication key used for signing requests</param>
            <returns>A newly created QueueStorage instance</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.GetQueue(System.String)">
            <summary>
            Get a reference to a Queue object with a specified name. This method does not make a call to
            the queue service.
            </summary>
            <param name="queueName">The name of the queue</param>
            <returns>A newly created queue object</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.ListQueues">
            <summary>
            Lists the queues within the account.
            </summary>
            <returns>A list of queues</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.ListQueues(System.String)">
            <summary>
            Lists the queues within the account that start with the given prefix.
            </summary>
            <param name="prefix">If prefix is null returns all queues.</param>
            <returns>A list of queues.</returns>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.DefaultTimeout">
            <summary>
            The default timeout
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.DefaultRetryPolicy">
            <summary>
            The default retry policy
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.Timeout">
            <summary>
            The time out for each request to the storage service.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.BaseUri">
            <summary>
            The base URI of the blob storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.AccountName">
            <summary>
            The name of the storage account
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorage.UsePathStyleUris">
            <summary>
            Indicates whether to use/generate path-style or host-style URIs
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.Message">
            <summary>
            Objects of this class represent a single message in the queue.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.Message.MaxMessageSize">
            <summary>
            The maximum message size in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.Message.MaxTimeToLive">
            <summary>
            The maximum amount of time a message is kept in the queue. Max value is 7 days. 
            Value is given in seconds.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.#ctor">
            <summary>
            This constructor is not publicly exposed.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.#ctor(System.String)">
            <summary>
            Creates a message and initializes the content of the message to be the specified string.
            </summary>
            <param name="contents">A string representing the contents of the message.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.#ctor(System.Byte[])">
            <summary>
            Creates a message and given the specified byte contents.
            In this implementation, regardless of whether an XML or binary data is passed into this 
            function, message contents are converted to base64 before passing the data to the queue service.
            When calculating the size of the message, the size of the base64 encoding is thus the important
            parameter.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.ContentAsString">
            <summary>
            Returns the the contents of the message as a string.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.ContentAsBytes">
            <summary>
            Returns the content of the message as a byte array
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.SetContentFromBase64String(System.String)">
            <summary>
            When calling the Get() operation on a queue, the content of messages 
            returned in the REST protocol are represented as Base64-encoded strings.
            This internal function transforms the Base64 representation into a byte array.
            </summary>
            <param name="str">The Base64-encoded string.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.Message.GetContentXMLRepresentation(System.Int32@)">
            <summary>
            Internal method used for creating the XML that becomes part of a REST request
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.Message.Id">
            <summary>
            A unique ID of the message as returned from queue operations.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.Message.PopReceipt">
            <summary>
            When a message is retrieved from a queue, a PopReceipt is returned. The PopReceipt is used when 
            deleting a message from the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.Message.InsertionTime">
            <summary>
            The point in time when the message was put into the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.Message.ExpirationTime">
            <summary>
            A message's expiration time.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.Message.TimeNextVisible">
            <summary>
            The point in time when a message becomes visible again after a Get() operation was called 
            that returned the message.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.MessageReceivedEventHandler">
            <summary>
            Queues in the storage client library expose a functionality for listening for incoming messages. 
            If a message is put into a queue, a corresponding event is issued and this delegate is called. This functionality
            is implemented internally in this library by periodically polling for incoming messages.
            </summary>
            <param name="sender">The queue that has received a new event.</param>
            <param name="e">The event argument containing the message.</param>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.MessageReceivedEventArgs">
            <summary>
            The argument class for the MessageReceived event.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.MessageReceivedEventArgs._msg">
            <summary>
            The message itself.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageReceivedEventArgs.#ctor(Microsoft.Samples.ServiceHosting.StorageClient.Message)">
            <summary>
            Constructor for creating a message received argument.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageReceivedEventArgs.Message">
            <summary>
            The message received by the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueProperties.ApproximateMessageCount">
            <summary>
            The approximated amount of messages in the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.QueueProperties.Metadata">
            <summary>
            Metadata for the queue in the form of name-value pairs.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue">
            <summary>
            Objects of this class represent a queue in a user's storage account.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue._name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue._account">
            <summary>
            The user account this queue lives in.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.#ctor">
            <summary>
            This constructor is only called by subclasses.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.CreateQueue(System.Boolean@)">
            <summary>
            Creates a queue in the specified storage account.
            </summary>
            <param name="queueAlreadyExists">true if a queue with the same name already exists.</param>
            <returns>true if the queue was successfully created.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.CreateQueue">
            <summary>
            Creates a queue in the specified storage account.
            </summary>
            <returns>true if the queue was successfully created.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.DoesQueueExist">
            <summary>
            Determines whether a queue with the same name already exists in an account.
            </summary>
            <returns>true if a queue with the same name already exists.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.DeleteQueue">
            <summary>
            Deletes the queue. The queue will be deleted regardless of whether there are messages in the 
            queue or not.
            </summary>
            <returns>true if the queue was successfully deleted.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.SetProperties(Microsoft.Samples.ServiceHosting.StorageClient.QueueProperties)">
            <summary>
            Sets the properties of a queue.
            </summary>
            <param name="properties">The queue's properties to set.</param>
            <returns>true if the properties were successfully written to the queue.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.GetProperties">
            <summary>
            Retrieves the queue's properties.
            </summary>
            <returns>The queue's properties.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.ApproximateCount">
            <summary>
            Retrieves the approximate number of messages in a queue.
            </summary>
            <returns>The approximate number of messages in this queue.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.PutMessage(Microsoft.Samples.ServiceHosting.StorageClient.Message)">
            <summary>
            Puts a message in the queue.
            </summary>
            <param name="msg">The message to store in the queue.</param>
            <returns>true if the message has been successfully enqueued.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.PutMessage(Microsoft.Samples.ServiceHosting.StorageClient.Message,System.Int32)">
            <summary>
            Puts a message in the queue.
            </summary>
            <param name="msg">The message to store in the queue.</param>
            <param name="timeToLiveInSeconds">The time to live for the message in seconds.</param>
            <returns>true if the message has been successfully enqueued.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.GetMessage">
            <summary>
            Retrieves a message from the queue. 
            </summary>
            <returns>The message retrieved or null if the queue is empty.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.GetMessage(System.Int32)">
            <summary>
            Retrieves a message and sets its visibility timeout to the specified number of seconds.
            </summary>
            <param name="visibilityTimeoutInSeconds">Visibility timeout of the message retrieved in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.GetMessages(System.Int32)">
            <summary>
            Tries to retrieve the given number of messages.
            </summary>
            <param name="numberOfMessages">Maximum number of messages to retrieve.</param>
            <returns>The list of messages retrieved.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.GetMessages(System.Int32,System.Int32)">
            <summary>
            Tries to retrieve the given number of messages.
            </summary>
            <param name="numberOfMessages">Maximum number of messages to retrieve.</param>
            <param name="visibilityTimeoutInSeconds">The visibility timeout of the retrieved messages in seconds.</param>
            <returns>The list of messages retrieved.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.PeekMessage">
            <summary>
            Get a message from the queue but do not actually dequeue it. The message will remain visible 
            for other parties requesting messages.
            </summary>
            <returns>The message retrieved or null if there are no messages in the queue.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.PeekMessages(System.Int32)">
            <summary>
            Tries to get a copy of messages in the queue without actually dequeuing the messages.
            The messages will remain visible in the queue.
            </summary>
            <param name="numberOfMessages">Maximum number of message to retrieve.</param>
            <returns>The list of messages retrieved.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.DeleteMessage(Microsoft.Samples.ServiceHosting.StorageClient.Message)">
            <summary>
            Deletes a message from the queue.
            </summary>
            <param name="msg">The message to retrieve with a valid popreceipt.</param>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.Clear">
            <summary>
            Delete all messages in a queue.
            </summary>
            <returns>true if all messages were deleted successfully.</returns>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.DefaultPollInterval">
            <summary>
            The default time interval between polling the queue for messages. 
            Polling is only enabled if the user has called StartReceiving().
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.StartReceiving">
            <summary>
            Starts the automatic reception of messages.
            </summary>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.StopReceiving">
            <summary>
            Stop the automatic reception of messages.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.Name">
            <summary>
            The name of the queue exposed as a public property.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.AccountInfo">
            <summary>
            The account info object this queue lives in -- exposed as an internal property.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.UsePathStyleUris">
            <summary>
            Indicates whether to use/generate path-style or host-style URIs
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.RetryPolicy">
            <summary>
            The retry policy used for retrying requests; this is the retry policy of the 
            storage account where this queue was created
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.Timeout">
            <summary>
            The timeout of requests.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.PollInterval">
            <summary>
            The poll interval in milliseconds. If not explicitly set, this defaults to 
            the DefaultPollInterval.
            </summary>
        </member>
        <member name="E:Microsoft.Samples.ServiceHosting.StorageClient.MessageQueue.MessageReceived">
            <summary>
            The event users subscribe to in order to automatically receive messages
            from a queue.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorageRest.GetBlobContainer(System.String)">
            <summary>
            Get a reference to a BlobContainer object with the given name.
            This method does not make any calls to the storage service.
            </summary>
            <param name="containerName">The name of the container</param>
            <returns>A reference to a newly created BlobContainer object</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobStorageRest.ListBlobContainers">
            <summary>
            Lists the containers within the account.
            </summary>
            <returns>A list of containers</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.CreateContainer(System.Collections.Specialized.NameValueCollection,Microsoft.Samples.ServiceHosting.StorageClient.ContainerAccessControl)">
            <summary>
            Create the container with the specified access control if it does not exist
            </summary>
            <param name="metadata">The metadata for the container. Can be null to indicate no metadata</param>
            <param name="accessControl">The access control (public or private) with which to create the container</param>
            <returns>true if the container was created. false if the container already exists</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.GetContainerProperties">
            <summary>
            Get the properties for the container if it exists.
            </summary>
            <returns>The metadata for the container if it exists, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.GetContainerAccessControl">
            <summary>
            Get the access control permissions associated with the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.SetContainerAccessControl(Microsoft.Samples.ServiceHosting.StorageClient.ContainerAccessControl)">
            <summary>
            Get the access control permissions associated with the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.CreateBlob(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Create a new blob or overwrite an existing blob.
            </summary>
            
            <param name="blobProperties">The properties of the blob</param>
            <param name="blobContents">The contents of the blob</param>
            <param name="overwrite">Should this request overwrite an existing blob ?</param>
            <returns>true if the blob was created. false if the blob already exists and <paramref name="overwrite"/>was set to false</returns>
            <remarks>The LastModifiedTime property of <paramref name="blobProperties"/> is set as a result of this call</remarks>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.UpdateBlobIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents)">
            <summary>
            Updates an existing blob if it has not been modified since the specified time which is typically
            the last modified time of the blob when you retrieved it.
            Use this method to implement optimistic concurrency by avoiding clobbering changes to the blob
            made by another writer.
            </summary>
            <param name="blobProperties">The properties of the blob. This object should be one previously
            obtained from a call to GetBlob or GetBlobProperties and have its LastModifiedTime property set.</param>
            <param name="contents">The contents of the blob. The contents of the blob should be readable</param>
            <returns>true if the blob was updated. false if the blob has changed since the last time</returns>
            <remarks>The LastModifiedTime property of <paramref name="properties"/> is set as a result of this call</remarks>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.GetBlob(System.String,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Get the blob contents and properties if the blob exisits
            </summary>
            <param name="name">The name of the blob</param>
            <param name="blobContents">Object in which the contents are returned.
            This object should contain a writable stream or should be a default constructed object.</param>
            <param name="transferAsChunks">Should the blob be gotten in pieces. This requires more round-trips, but will retry smaller piecs in case of failure.</param>
            <returns>The properties of the blob if the blob exists.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.GetBlobIfModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,Microsoft.Samples.ServiceHosting.StorageClient.BlobContents,System.Boolean)">
            <summary>
            Gets the blob contents and properties if the blob has not been modified since the time specified.
            Use this method if you have cached the contents of a blob and want to avoid retrieving the blob
            if it has not changed since the last time you retrieved it.
            </summary>
            <param name="blobProperties">The properties of the blob obtained from an earlier call to GetBlob. This
            parameter is updated by the call if the blob has been modified</param>
            <param name="blobContents">Contains the stream to which the contents of the blob are written if it has been
            modified</param>
            <param name="transferAsChunks">Should the blob be gotten in pieces. This requires more round-trips, but will retry smaller piecs in case of failure.</param>
            <returns>true if the blob has been modified, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.GetBlobProperties(System.String)">
            <summary>
            Get the properties of the blob if it exists.
            This method is also the simplest way to check if a blob exists.
            </summary>
            <param name="name">The name of the blob</param>
            <returns>The properties of the blob if it exists. null otherwise.
            The properties for the contents of the blob are not set</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.UpdateBlobMetadata(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties)">
            <summary>
            Set the metadata of an existing blob.
            </summary>
            <param name="blobProperties">The blob properties object whose metadata is to be updated</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.UpdateBlobMetadataIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties)">
            <summary>
            Set the metadata of an existing blob if it has not been modified since it was last retrieved.
            </summary>
            <param name="blobProperties">The blob properties object whose metadata is to be updated.
            Typically obtained by a previous call to GetBlob or GetBlobProperties</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.DeleteBlob(System.String)">
            <summary>
            Delete a blob with the given name
            </summary>
            <param name="name">The name of the blob</param>
            <returns>true if the blob exists and was successfully deleted, false if the blob does not exist</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.DeleteBlobIfNotModified(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,System.Boolean@)">
            <summary>
            Delete a blob with the given name if the blob has not been modified since it was last obtained.
            Use this method for optimistic concurrency to avoid deleting a blob that has been modified since
            the last time you retrieved it
            </summary>
            <param name="blob">A blob object (typically previously obtained from a GetBlob call)</param>
            <param name="modified">This out parameter is set to true if the blob was not deleted because
            it was modified</param>
            <returns>true if the blob exists and was successfully deleted, false if the blob does not exist or was
            not deleted because the blob was modified.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.ListBlobs(System.String,System.Boolean)">
            <summary>
            Enumerates all blobs with a given prefix.
            </summary>
            <param name="prefix"></param>
            <param name="combineCommonPrefixes">If true common prefixes with "/" as seperator</param>
            <returns>The list of blob properties and common prefixes</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.PutLargeBlobImpl(Microsoft.Samples.ServiceHosting.StorageClient.BlobProperties,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Uploads a blob in chunks.
            </summary>
            <param name="blobProperties"></param>
            <param name="stream"></param>
            <param name="overwrite"></param>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.BlobContainerRest.DownloadData(System.String,System.IO.Stream,System.String,System.String,System.Int64,System.Int64,System.Collections.Specialized.NameValueCollection,System.Boolean@)">
            <summary>
            Helper method used for getting blobs, ranges of blobs and blob properties.
            </summary>
            <param name="blobName">Name of the blob</param>
            <param name="stream">The output stream to write blob data to. Can be null if only retrieving blob properties</param>
            <param name="eTagIfNoneMatch">The If-None-Match header. Used to avoid downloading blob data if the blob has not changed</param>
            <param name="eTagIfMatch">The If-Match header. Used to ensure that all chunks of the blob are of the same blob</param>
            <param name="offset">The offset of the blob data to begin downloading from. Set to 0 to download all data.</param>
            <param name="length">The length of the blob data to download. Set to 0 to download all data</param>
            <param name="nvc">Query paramters to add to the request.</param>
            <param name="localModified">Whether the blob had been modfied with respect to the <paramref name="eTagIfNoneMatch"/></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.XPathQueryHelper">
            <summary>
            Helper class for loading values from an XML segment
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageHttpConstants.HeaderValues.DefaultContentType">
            <summary>
            This is the default content-type xStore uses when no content type is specified
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageHttpConstants.RegularExpressionStrings">
            <summary>
            Contains regular expressions for checking whether container and table names conform
            to the rules of the storage REST protocols.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageHttpConstants.RegularExpressionStrings.ValidContainerNameRegex">
            <summary>
            Container or queue names that match against this regular expression are valid.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageHttpConstants.RegularExpressionStrings.ValidTableNameRegex">
            <summary>
            Table names that match against this regular expression are valid.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorageRest.GetQueue(System.String)">
            <summary>
            Get a reference to a Queue object with a specified name. This method does not make a call to
            the queue service.
            </summary>
            <param name="queueName">The name of the queue</param>
            <returns>A newly created queue object</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorageRest.ListQueues(System.String)">
            <summary>
            Lists all queues with a given prefix within an account.
            </summary>
            <param name="prefix"></param>
            <returns>The list of queue names.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.QueueStorageRest.ListQueuesImpl(System.String,System.String,System.Int32)">
            <summary>
            Lists the queues within the account.
            </summary>
            <returns>A list of queues</returns>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo">
            <summary>
            Objects of this class encapsulate information about a storage account and endpoint configuration. 
            Associated with a storage account is the account name, the base URI of the account and a shared key. 
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultQueueStorageEndpointConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the queue storage endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultBlobStorageEndpointConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the blob storage endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultTableStorageEndpointConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the table storage endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultAccountNameConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the storage account name.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultAccountSharedKeyConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the shared key associated with a storage account.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.DefaultUsePathStyleUrisConfigurationString">
            <summary>
            The default configuration string in configuration files for setting the UsePathStyleUris option.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.CSConfigStringPrefix">
            <summary>
            The default prefix string in application config and Web.config files to indicate that this setting should be looked up 
            in the fabric's configuration system.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.#ctor(System.Uri,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Constructor for creating account info objects.
            </summary>
            <param name="baseUri">The account's base URI.</param>
            <param name="usePathStyleUris">If true, path-style URIs (http://baseuri/accountname/containername/objectname) are used.
            If false host-style URIs (http://accountname.baseuri/containername/objectname) are used,
            where baseuri is the URI of the service..
            If null, the choice is made automatically: path-style URIs if host name part of base URI is an 
            IP addres, host-style otherwise.</param>
            <param name="accountName">The account name.</param>
            <param name="base64Key">The account's shared key.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.#ctor(System.Uri,System.Nullable{System.Boolean},System.String,System.String,System.Boolean)">
            <summary>
            Constructor for creating account info objects.
            </summary>
            <param name="baseUri">The account's base URI.</param>
            <param name="usePathStyleUris">If true, path-style URIs (http://baseuri/accountname/containername/objectname) are used.
            If false host-style URIs (http://accountname.baseuri/containername/objectname) are used,
            where baseuri is the URI of the service.
            If null, the choice is made automatically: path-style URIs if host name part of base URI is an 
            IP addres, host-style otherwise.</param>
            <param name="accountName">The account name.</param>
            <param name="base64Key">The account's shared key.</param>
            <param name="allowIncompleteSettings">true if it shall be allowed to only set parts of the StorageAccountInfo properties.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultQueueStorageAccountFromConfiguration(System.Boolean)">
            <summary>
            Retrieves account settings for the queue service from the default settings. 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultQueueStorageAccountFromConfiguration">
            <summary>
            Retrieves account settings for the queue service from the default settings. 
            Throws an exception in case of incomplete settings.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultTableStorageAccountFromConfiguration(System.Boolean)">
            <summary>
            Retrieves account settings for the table service from the default settings. 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultTableStorageAccountFromConfiguration">
            <summary>
            Retrieves account settings for the table service from the default settings. 
            Throws an exception in case of incomplete settings.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultBlobStorageAccountFromConfiguration(System.Boolean)">
            <summary>
            Retrieves account settings for the blob service from the default settings. 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetDefaultBlobStorageAccountFromConfiguration">
            <summary>
            Retrieves account settings for the blob service from the default settings. 
            Throws an exception in case of incomplete settings.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetAccountInfoFromConfiguration(System.String,System.Boolean)">
            <summary>
            Gets settings from default configuration names except for the endpoint configuration string.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetAccountInfoFromConfiguration(System.String)">
            <summary>
            Gets settings from default configuration names except for the endpoint configuration string. Throws an exception 
            in the case of incomplete settings.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetConfigurationSetting(System.String,System.String,System.Boolean)">
            <summary>
            Gets a configuration setting from application settings in the Web.config or App.config file. 
            When running in a hosted environment, configuration settings are read from .cscfg
            files.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.GetAccountInfoFromConfiguration(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves account information settings from configuration settings. First, the implementation checks for 
            settings in an application config section of an app.config or Web.config file. These values are overwritten 
            if the same settings appear in a .csdef file.
            The implementation also supports indirect settings. In this case, indirect settings overwrite all other settings.
            </summary>        
            <param name="accountNameConfiguration">Configuration string for the account name.</param>
            <param name="accountSharedKeyConfiguration">Configuration string for the key.</param>
            <param name="endpointConfiguration">Configuration string for the endpoint.</param>
            <param name="usePathStyleUrisConfiguration">Configuration string for the path style.</param>
            <param name="allowIncompleteSettings">If false, an exception is thrown if not all settings are available.</param>
            <returns>StorageAccountInfo object containing the retrieved settings.</returns>        
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.IsCompleteSetting">
            <summary>
            Checks whether all essential properties of this object are set. Only then, the account info object 
            should be used in ohter APIs of this library.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.CheckComplete">
            <summary>
            Checks whether this StorageAccountInfo object is complete in the sense that all properties are set.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.BaseUri">
            <summary>
            The base URI of the account.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.AccountName">
            <summary>
            The account name.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.Base64Key">
            <summary>
            The account's key.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo.UsePathStyleUris">
            <summary>
            If set, returns the UsePathStyleUris properties. If the property has not been explicitly set, 
            the implementation tries to derive the correct value from the base URI.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants">
            <summary>
            Class representing some important table storage constants.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants.TablesName">
            <summary>
            Internal constant for querying tables.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants.TablesQuery">
            <summary>
            Internal constant for querying tables.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants.MaxStringPropertySizeInBytes">
            <summary>
            The maximum size of strings per property/column is 64 kB (that is 32k characters.)
            Note: This constant is smaller for the development storage table service.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants.MaxStringPropertySizeInChars">
            <summary>
            One character in the standard UTF-16 character presentation is 2 bytes.
            Note: This constant is smaller for the development storage table service.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageConstants.MinSupportedDateTime">
            <summary>
            We want to prevent users from the pitfall of mixing up Utc and local time.
            Because of this we add some time to the minimum supported datetime.
            As a result, there will be no error condition from the server even 
            if a user converts the minimum supported date time to a local time and 
            stores this in a DateTime field.
            The local development storage support the SQL range of dates which is narrower than the
            one for the table storage service and so we use that value here. 
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage">
            <summary>
            API entry point for using structured storage. The underlying usage pattern is designed to be 
            similar to the one used in blob and queue services in this library. 
            Users create a TableStorage object by calling the static Create() method passing account credential 
            information to this method. The TableStorage object can then be used to create, delete and list tables. 
            There are two methods to get DataServiceContext objects that conform to the appropriate security scheme. 
            The first way is to call the GetDataServiceContext() method on TableStorage objects. The naming is again 
            chosen to conform to the convention in the other APIs for blob and queue services in this library. 
            This class can also be used as an adapter pattern. I.e., DataServiceContext objects can be created 
            independnt from a TableStorage object. Calling the Attach() method will make sure that the appropriate 
            security signing is used on these objects. This design was chosen to support various usage patterns that 
            might become necessary for autogenerated code.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.DefaultRetryPolicy">
            <summary>
            The default retry policy
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.Create(System.Uri,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Creates a TableStorage service object. This object is the entry point into the table storage API.
            </summary>
            <param name="baseUri">The base URI of the table storage service.</param>
            <param name="usePathStyleUris">Type of URI scheme used.</param>
            <param name="accountName">The account name.</param>
            <param name="base64Key">Base64 encoded version of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.Create(Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo)">
            <summary>
            Creates a TableStorage object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.CreateTablesFromModel(System.Type)">
            <summary>
            Infers a list of tables from a DataServiceContext-derived type and makes sure
            those tables exist in the given service. The table endpoint information is retrieved from the 
            standard configuration settings.
            </summary>
            <remarks>
            Tables are inferred by finding all the public properties of type IQueryable&lt;T&gt; in 
            the provided type, where T is a type with an ID (in the case of table storage, this means it either
            has a [DataServiceKey("PartitionKey", "RowKey")] attribute in the class, or derives from
            the TableStorageEntity class included in this sample library (which in turn has that attribute).
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.CreateTablesFromModel(System.Type,System.String)">
            <summary>
            Infers a list of tables from a DataServiceContext-derived type and makes sure
            those tables exist in the given service.        
            </summary>
            <param name="serviceContextType">The DataServiceContext type from which the tables are inferred.</param>
            <param name="endpointConfiguration">A configuration string that is used to determine the table storage endpoint.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.CreateTablesFromModel(System.Type,Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo)">
            <summary>
            Infers a list of tables from a DataServiceContext-derived type and makes sure
            those tables exist in the given service.        
            </summary>
            <param name="serviceContextType">The type of the DataServiceContext.</param>
            <param name="account">An object containing information about the table storage endpoint to be used.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.GetDataServiceContext">
            <summary>
            Creates a DataServiceContext object that takes care of implementing the table storage signing process.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.GetServiceBaseUri(System.Uri,System.Boolean,System.String)">
            <summary>
            If the adaptor pattern with Attach() shall be used, this function can be used to generate the 
            table service base Uri depending on the path style syntax.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.GetServiceBaseUri(Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo)">
            <summary>
            If the adaptor pattern with Attach() shall be used, this function can be used to generate the 
            table service base Uri depending on the path style syntax.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.Attach(System.Data.Services.Client.DataServiceContext)">
            <summary>
            If DataServiceContext objects are created at different places, this method can be called to configure the 
            DataServiceContext object to implement the required security scheme.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.ListTables">
            <summary>
            Lists all the tables under this service's URL
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.CreateTable(System.String)">
            <summary>
            Creates a new table in the service
            </summary>
            <param name="tableName">The name of the table to be created</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.TryCreateTable(System.String)">
            <summary>
            Tries to create a table with the given name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>True if the operation was completed successfully. False if the table already exists.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.DoesTableExist(System.String)">
            <summary>
            Checks whether a table with the same name already exists.
            </summary>
            <param name="tableName">The name of the table to check.</param>
            <returns>True iff the table already exists.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.DeleteTable(System.String)">
            <summary>
            Deletes a table from the service.
            </summary>
            <param name="tableName">The name of the table to be deleted</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.TryDeleteTable(System.String)">
            <summary>
            Tries to delete the table with the given name. 
            </summary>
            <param name="tableName">The name of the table to delete.</param>
            <returns>True if the table was successfully deleted. False if the table does not exists.</returns>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.BaseUri">
            <summary>
            The base URI of the table storage service
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.AccountName">
            <summary>
            The name of the storage account
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.UsePathStyleUris">
            <summary>
            Indicates whether to use/generate path-style or host-style URIs
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorage.Base64Key">
            <summary>
            The base64 encoded version of the key.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.EvaluateException(System.Exception,System.Net.HttpStatusCode@,Microsoft.Samples.ServiceHosting.StorageClient.StorageExtendedErrorInformation@)">
            <summary>
            Checks whether the exception is or contains a DataServiceClientException and extracts the 
            returned http status code and extended error information.
            </summary>
            <param name="exception">The exception from which to extract information</param>
            <param name="status">The Http status code for the exception</param>
            <param name="extendedErrorInfo">Extended error information including storage service specific
            error code and error message</param>
            <returns>True if the exception is or contains a DataServiceClientException.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.EvaluateException(System.Exception,System.Net.HttpStatusCode@)">
            <summary>
            Checks whether the exception is or contains a DataServiceClientException and extracts the 
            returned http status code.
            </summary>
            <param name="exception">The exception from which to extract information</param>
            <param name="status">The Http status code for the exception</param>
            <returns>True if the exception is or contains a DataServiceClientException.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.IsTableStorageException(System.Exception)">
            <summary>
            Checks whether the exception is either a DataServiceClientException, a DataServiceQueryException or a 
            DataServiceRequestException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.CanBeRetried(System.InvalidOperationException,System.Net.HttpStatusCode@)">
            <summary>
            Only certain classes of errors should be retried. This method evaluates an exception 
            and returns whether this class of exception can be retried.
            </summary>
            <param name="e">The exception to analyze.</param>
            <param name="statusCode">The HttpStatusCode retrieved from the exception.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.CanBeRetried(System.InvalidOperationException)">
            <summary>
            Overload that does not retrun the HttpStatusCode.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.CheckStringProperty(System.String)">
            <summary>
            Checks whether the string can be inserted in a table storage table. Throws an exception if 
            this is not the case.
            </summary>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageHelpers.ValidateStringProperty(System.String)">
            <summary>
            Checks whether the string can be inserted into a table storage table.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageTable.#ctor(System.String)">
            <summary>
            Creates a table with the specified name.
            </summary>
            <param name="name">The name of the table.</param>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageTable.TableName">
            <summary>
            The table name.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity">
            <summary>
            This class represents an entity (row) in a table in table storage.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.#ctor(System.String,System.String)">
            <summary>
            Creates a TableStorageEntity object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.#ctor">
            <summary>
            Creates a TableStorageEntity object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.Equals(System.Object)">
            <summary>
            Compares to entities.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.GetHashCode">
            <summary>
            Computes a HashCode for this object.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.PartitionKey">
            <summary>
            The partition key of a table entity. The concatenation of the partition key 
            and row key must be unique per table.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageEntity.RowKey">
            <summary>
            The row key of a table entity.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1">
            <summary>
            This class can be used for handling continuation tokens in TableStorage.
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.#ctor(System.Data.Services.Client.DataServiceQuery{`0})">
            <summary>
            Objects of this class can be created using this constructor directly or by 
            calling a factory method on the TableStorageDataServiceContext class
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.#ctor(System.Data.Services.Client.DataServiceQuery{`0},Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicy)">
            <summary>
            Objects of this class can be created using this constructor directly or by 
            calling a factory method on the TableStorageDataServiceContext class
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.Execute">
            <summary>
            Normal Execute() on the query without retry. Just maps to _query.Execute().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.ExecuteWithRetries">
            <summary>
            Calling Execute() on the query with the current retry policy.
            </summary>
            <returns>An IEnumerable respresenting the results of the query.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.ExecuteWithRetries(Microsoft.Samples.ServiceHosting.StorageClient.RetryPolicy)">
            <summary>
            Calling Execute() on the query with the current retry policy.
            </summary>
            <param name="retry">The retry policy to be used for this request.</param>
            <returns>An IEnumerable respresenting the results of the query.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.ExecuteAll">
            <summary>
            Returns all results of the query and hides the complexity of continuation if 
            this is desired by a user. Users should be aware that this operation can return 
            many objects. Uses no retries.
            Important: this function does not call Execute immediately. Instead, it calls Execute() on 
            the query only when the result is enumerated. This is a difference to the normal 
            Execute() and Execute() with retry method.         
            </summary>
            <returns>An IEnumerable representing the results of the query.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.ExecuteAllWithRetries">
            <summary>
            Returns all results of the query and hides the complexity of continuation if 
            this is desired by a user. Users should be aware that this operation can return 
            many objects. This operation also uses the current retry policy.
            Important: this function does not call Execute immediately. Instead, it calls Execute() on 
            the query only when the result is enumerated. This is a difference to the normal 
            Execute() and Execute() with retry method. 
            </summary>
            <returns>An IEnumerable representing the results of the query.</returns>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.ExecuteAll(System.Boolean)">
            <summary>
            Returns all results of the query and hides the complexity of continuation if 
            this is desired by a user. Users should be aware that this operation can return 
            many objects. 
            Important: this function does not call Execute immediately. Instead, it calls Execute() on 
            the query only when the result is enumerated. This is a difference to the normal 
            Execute() and Execute() with retry method. 
            </summary>
            <param name="withRetry">Determines whether to use retries or not.</param>
            <returns>An IEnumerable representing the results of the query.</returns>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.Query">
            <summary>
            Gets the underlying normal query object.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceQuery`1.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext">
            <summary>
            The table storage-specific DataServiceContext class. It adds functionality for handling 
            the authentication process required by the table storage service.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Creates a DataServiceContext object and configures it so that it can be used with the table storage service.
            </summary>
            <param name="serviceRoot">The root URI of the service.</param>
            <param name="accountName">The account name.</param>
            <param name="sharedKey">The shared key associated with this service.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.#ctor(Microsoft.Samples.ServiceHosting.StorageClient.StorageAccountInfo)">
            <summary>
            Creates a DataServiceContext object and configures it so that it can be used with the table storage service.
            </summary>
            <param name="account">A StorageAccountInfo object containing information about how to access the table storage service.</param>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.#ctor">
            <summary>
            Creates a DataServiceContext object and configures it so that it can be used with the table storage service.
            Information on the table storage endpoint is retrieved by accessing configuration settings in the app config section 
            of a Web.config or app config file, or by accessing settings in cscfg files.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.SaveChangesWithRetries">
            <summary>
            Calls the SaveChanges() method and applies retry semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.SaveChangesWithRetries(System.Data.Services.Client.SaveChangesOptions)">
            <summary>
            Calls the SaveChanges() method and applies retry semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.DataContextSendingRequest(System.Object,System.Data.Services.Client.SendingRequestEventArgs)">
            <summary>
            Callback method called whenever a request is sent to the table service. This 
            is where the signing of the request takes place.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.ServiceHosting.StorageClient.TableStorageDataServiceContext.RetryPolicy">
            <summary>
            The retry policy used for retrying requests
            </summary>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.ContextRef">
            <summary>
            Helper class to avoid long-lived references to context objects
            </summary>
            <remarks>
            Need to be careful not to maintain a reference to the context
            object from the auth adapter, since the adapter is probably
            long-lived and the context is not. This intermediate helper
            class is the one subscribing to context events, so when the
            context can be collected then this will be collectable as well.
            </remarks>
        </member>
        <member name="T:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException">
            <summary>
            The retry policies for blobs and queues deal with special StorageClient and StorageServer exceptions.
            In case of tables, we don't want to return these exceptions but instead the normal data service 
            exception. This class serves as a simple wrapper for these exceptions, and indicates that we 
            need retries.
            Data service exceptions are stored as inner exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException.#ctor">
            <summary>
            Creates a TableRetryWrapperException object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException.#ctor(System.Exception)">
            <summary>
            Creates a TableRetryWrapperException object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException.#ctor(System.String)">
            <summary>
            Creates a TableRetryWrapperException object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a TableRetryWrapperException object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.ServiceHosting.StorageClient.TableRetryWrapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a TableRetryWrapperException object.
            </summary>
        </member>
    </members>
</doc>
