<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lokad.Cloud.Framework</name>
    </assembly>
    <members>
        <member name="T:Lokad.Cloud.Services.BlobSetReduceService">
            <summary>Framework service part of Lokad.Cloud. This service is used to
            perform reduce operations starting from a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.QueueService`1">
            <summary>Strongly-type queue service (inheritors are instanciated by
            reflection on the cloud).</summary>
            <typeparam name="T">Message type</typeparam>
            <remarks>
            <para>The implementation is not constrained by the 8kb limit for <c>T</c> instances.
            If the intances are larger, the framework will wrap them into the cloud storage.</para>
            <para>Whenever possible, we suggest to design the service logic to be idempotent
            in order to make the service reliable and ultimately consistent.</para>
            </remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudService">
            <summary>Base class for cloud services.</summary>
            <remarks>Do not inherit directly from <see cref="T:Lokad.Cloud.Framework.CloudService"/>, inherit from
            <see cref="T:Lokad.Cloud.Framework.QueueService`1"/> or <see cref="T:Lokad.Cloud.Framework.ScheduledService"/> instead.</remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.CloudService._state">
            <summary>Indicates the state of the service, as retrieved during the last check.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.CloudService._lastStateCheck">
            <summary>Indicates the last time the service has checked its excution status.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Start">
            <summary>Wrapper method for the <see cref="M:Lokad.Cloud.Framework.CloudService.StartImpl"/> method. Checks
            that the service status before executing the inner start.</summary>
            <returns></returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.StartImpl">
            <summary>Called when the service is launched.</summary>
            <returns><c>true</c> if the service did actually perform an operation, and
            <c>false</c> otherwise. This value is used by the framework to adjust the
            start frequency of the respective services.</returns>
            <remarks>This method is expected to be implemented by the framework services
            not by the app services.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Stop">
            <summary>Called when the service is shut down.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1">
            <summary>Instanciate a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> based on the current
            storage providers (prefix is auto-generated based on the type <c>T</c>).</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1(System.String)">
            <summary>Instanciate a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> with the specified prefix name
            based on the current storage providers.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Put messages into the queue implicitely associated to the
            type <c>T</c>.</summary>
            <remarks>
            The implementation is not constrained by the 8kb limit for <c>T</c> messages.
            If messages are larger, the framework will wrap them into the cloud storage.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.Put``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Put messages into the queue identified by <c>queueName</c>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.CloudService.GetAllServices(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>Get all services instantiated through reflection.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.StateCheckInterval">
            <summary>Indicates the frequency where the service is actually checking for its state.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.Log">
            <summary>Error logger.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudService.Name">
            <summary>Name of the service (used for reporting purposes).</summary>
            <remarks>Default implementation returns <c>Type.FullName</c>.</remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.QueueService`1.OverflowingContainer">
            <summary>Name of the blob container used to hold overflowing messages
            from the queues.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.StartImpl">
            <summary>Do not override this method, use <see cref="M:Lokad.Cloud.Framework.QueueService`1.Start(System.Collections.Generic.IEnumerable{`0})"/>
            instead.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Start(System.Collections.Generic.IEnumerable{`0})">
            <summary>Method called by the <c>Lokad.Cloud</c> framework when messages are
            available for processing.</summary>
            <param name="messages">Messages to be processed.</param>
            <remarks>
            We suggest to make messages deleted asap through the <see cref="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)"/>
            method. Otherwise, messages will be automatically deleted when the method
            returns (except if an exception is thrown obviously).
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.GetMore(System.Int32)">
            <summary>Get more messages from the underlying queue.</summary>
            <param name="count">Maximal number of messages to be retrieved.</param>
            <returns>Retrieved messages (enumeration might be empty).</returns>
            <remarks>It is suggested to <see cref="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)"/> messages first
            before asking for more.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.GetMore``1(System.Int32,System.String)">
            <summary>Get more message from an arbitrary queue.</summary>
            <typeparam name="U">Message type.</typeparam>
            <param name="count">Number of message to be retrieved.</param>
            <param name="queueName">Name of the queue.</param>
            <returns>Retrieved message (enumeration might be empty).</returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(``0)">
            <seealso cref="!:Delete(IEnumerable&lt;U&gt;)"/>
        </member>
        <member name="M:Lokad.Cloud.Framework.QueueService`1.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Delete messages retrieved either through <see cref="M:Lokad.Cloud.Framework.QueueService`1.StartImpl"/>
            or through <see cref="M:Lokad.Cloud.Framework.QueueService`1.GetMore(System.Int32)"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueService`1.Name">
            <summary>Name of the queue associated to the service.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.MessageWrapper">
            <summary>The purpose of the <see cref="T:Lokad.Cloud.Framework.MessageWrapper"/> is to gracefully
            handle messages that are too large of the queue storage (or messages that happen
            to be already stored in the Blob Storage).</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.MessageWrapper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.MessageWrapper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Serialization method.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute">
            <summary>Schedule settings for the execution of a <see cref="T:Lokad.Cloud.Framework.ScheduledService"/>.</summary>
            <remarks>The implementation is kept very simple for now. Complete scheduling,
            specifing specific hours or days will be added later on.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudServiceSettingsAttribute">
            <summary>Shared settings for all <see cref="T:Lokad.Cloud.Framework.CloudService"/>s.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.AutoStart">
            <summary>Indicates whether the service is be started by default
            when the cloud app is deployed.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.Priority">
            <summary>Define the relative priority of this service compared to the
            other services.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.Description">
            <summary>Gets a description of the service (for administration purposes).</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.CloudServiceSettingsAttribute.ProcessingTimeout">
            <summary>Excution time-out for the <c>StartImpl</c> methods of 
            <see cref="T:Lokad.Cloud.Framework.CloudService"/> inheritors.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute.TriggerInterval">
            <summary>Indicates the interval between the scheduled executions
            (expressed in seconds).</summary>
            <remarks><c>TimeSpan</c> cannot be used here, because it's not compatible
            with the attribute usage.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledServiceState">
            <summary>Configuration state of the <seealso cref="T:Lokad.Cloud.Framework.ScheduledService"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ScheduledService">
            <summary>This cloud service is automatically called by the framework
            on scheduled basis. Scheduling options are provided through the
            <see cref="T:Lokad.Cloud.Framework.ScheduledServiceSettingsAttribute"/>.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.StartImpl">
            <seealso cref="M:Lokad.Cloud.Framework.CloudService.StartImpl"/>
        </member>
        <member name="M:Lokad.Cloud.Framework.ScheduledService.StartOnSchedule">
            <summary>Called by the framework.</summary>
            <remarks>We suggest not performing any heavy processing here. In case
            of heavy processing, put a message and use <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>
            instead.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Core.IQueueStorageProvider">
            <summary>Abstraction of the Queue Storage.</summary>
            <remarks>
            This provider represents a <em>logical</em> queue, not the actual
            Queue Storage. In particular, the provider implementation deals
            with overflowing messages (that is to say messages larger than 8kb)
            on its own.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.List(System.String)">
            <summary>Gets the list of queues whose name start with the specifed prefix.</summary>
            <param name="prefix">If null or empty, returns all queues.</param>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Get``1(System.String,System.Int32)">
            <summary>Gets messages from a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue to be pulled.</param>
            <param name="count">Maximal number of messages to be retrieved.</param>
            <returns>Enumeration of messages, possibly empty.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Put``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Put message on a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue where messages are put.</param>
            <param name="messages">Messages to be put.</param>
            <remarks>If the queue does not exist, it gets created.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Clear(System.String)">
            <summary>Clear all the messages from the specified queue.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.Delete``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Deletes messages from a queue.</summary>
            <typeparam name="T">Type of the messages.</typeparam>
            <param name="queueName">Identifier of the queue where the messages are removed from.</param>
            <param name="messages">Messages to be removed.</param>
            <returns>The number of messages actually deleted.</returns>
            <remarks>Messages must have first been retrieved through <see cref="M:Lokad.Cloud.Core.IQueueStorageProvider.Get``1(System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.DeleteQueue(System.String)">
            <summary>Deletes a queue.</summary>
            <remarks><c>true</c> if the queue name has been actually deleted.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IQueueStorageProvider.GetApproximateCount(System.String)">
            <summary>Gets the approximate number of items in this queue.</summary>
        </member>
        <member name="T:Lokad.Cloud.Core.ITypeMapperProvider">
            <summary>Convert types into identifier and vice-versa. The purpose of this 
            interface is to support implicit cloud storage names for processed items.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.ITypeMapperProvider.GetStorageName(System.Type)">
            <summary>Gets the identifier associated to the specifed type.</summary>
        </member>
        <member name="T:Lokad.Cloud.Core.IBlobStorageProvider">
            <summary>Abstraction for the Blob Storage.</summary>
            <remarks>
            This provider represents a <em>logical</em> blob storage, not the actual
            Blob Storage. In particular, this provider deals with overflowing buffers
            that need to be split in smaller chuncks to be uploaded.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.CreateContainer(System.String)">
            <summary>Creates a new blob container.</summary>
            <returns><c>true</c> if the container was actually created and false if
            the container already exists.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.DeleteContainer(System.String)">
            <summary>Delete a container.</summary>
            <remarks>Returns <c>true</c> if the container has been actually deleted.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.PutBlob``1(System.String,System.String,``0)">
            <summary>Puts a blob (overwrite if the blob already exists).</summary>
            <remarks>Creates the container if it does not exist beforehand.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.PutBlob``1(System.String,System.String,``0,System.Boolean)">
            <summary>Puts a blob and optionally overwrite.</summary>
            <remarks>Creates the container if it does not exist beforehand.</remarks>
            <returns><c>true</c> if the blob has been put and false if the blob already
            exists but could not be overwritten.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.GetBlob``1(System.String,System.String)">
            <summary>Gets a blob.</summary>
            <returns>If there is no such blob, a <c>null</c> (or a default value) is
            returned.</returns>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}},Lokad.Result{``0}@)">
            <summary>Update a blob while garantying an atomic update process.</summary>
            <param name="containerName"></param>
            <param name="blobName"></param>
            <param name="updater">The function is returning a <see cref="T:Lokad.Result`1"/>
            because the updater can optionally decide not to succeed with the update
            (in case where the update no more relevant for example.</param>
            <param name="result">Result returned by the updated.</param>
            <returns><c>true</c> if the update is successful.
            If the blob is updated between the retrieval and the update attempt,
            then no update is performed and the method returns <c>false</c>.</returns>
            <remarks>If there is not such blob available, the update is performed with
            the default <c>T</c> value.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,``0},``0@)">
            <seealso cref="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}},Lokad.Result{``0}@)"/>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}})">
            <summary>Update a blob while garantying an atomic update process.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,``0})">
            <seealso cref="M:Lokad.Cloud.Core.IBlobStorageProvider.UpdateIfNotModified``1(System.String,System.String,System.Func{``0,Lokad.Result{``0}})"/>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.DeleteBlob(System.String,System.String)">
            <summary>Deletes a blob.</summary>
        </member>
        <member name="M:Lokad.Cloud.Core.IBlobStorageProvider.List(System.String,System.String)">
            <summary>Iterates over the blobs considering the specified prefix.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.Services.QueueOverflowCollectorService.Name">
            <remarks>Name is override for consistency in the framework.</remarks>
        </member>
        <member name="T:GlobalAssemblyInfo">
            <summary>
             Assembly information class that is shared between all projects
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.ProvidersForCloudStorage">
            <summary>IoC argument for <see cref="T:Lokad.Cloud.Framework.CloudService"/> and other
            cloud abstractions.</summary>
            <remarks>This argument will be populated through Inversion Of Control (IoC)
            by the Lokad.Cloud framework itself. This class is placed in the
            <c>Lokad.Cloud.Framework</c> for convenience while inheriting a
            <see cref="T:Lokad.Cloud.Framework.CloudService"/>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.ProvidersForCloudStorage.#ctor(Lokad.Cloud.Core.IBlobStorageProvider,Lokad.Cloud.Core.IQueueStorageProvider,Lokad.ILog,Lokad.Cloud.Core.ITypeMapperProvider)">
            <summary>IoC constructor.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.BlobStorage">
            <summary>Abstracts the Blob Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.QueueStorage">
            <summary>Abstracts the Queue Storage.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.Log">
            <summary>Error Logger</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.ProvidersForCloudStorage.TypeMapper">
            <summary>Type mapper for implicit cloud storage.</summary>
        </member>
        <member name="T:Lokad.Cloud.Services.BlobSetMapMessage">
            <summary>Elementary mapping to be performed by the <see cref="T:Lokad.Cloud.Services.BlobSetMapService"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.SourcePrefix">
            <summary>Prefix associated to the input <c>BlobSet</c>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.DestinationPrefix">
            <summary>Prefix associated to the output <c>BlobSet</c>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Services.BlobSetMapMessage.ItemSuffix">
            <summary>Suffix associated to the item being considered.</summary>
        </member>
        <member name="T:Lokad.Cloud.Services.BlobSetMapService">
            <summary>Framework service part of Lokad.Cloud. This service is used to
            perform map operations between <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.QueueServiceSettingsAttribute">
            <summary>Default settings for the <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>. Once the queue
            service is deployed, settings are stored in the <c>lokad-cloud-queues</c> blob
            container.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueServiceSettingsAttribute.QueueName">
            <summary>Name of the queue attached to the <see cref="T:Lokad.Cloud.Framework.QueueService`1"/>.</summary>
            <remarks>If this value is null or empty, a default queue name is chosen based
            on the type <c>T</c>.</remarks>
        </member>
        <member name="P:Lokad.Cloud.Framework.QueueServiceSettingsAttribute.BatchSize">
            <summary>Suggested size for batch retrieval of messages.</summary>
            <remarks>The maximal value is 1000. We suggest to retrieve small messages
            in batch to reduce network overhead.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Framework.CloudServiceState">
            <summary>Status flag for <see cref="T:Lokad.Cloud.Framework.CloudService"/>s.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobLocator">
            <summary>Item locator for <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> collection.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSetMapSettings">
            <summary>Settings of a map operation.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetMapSettings.Mapper">
            <summary>Underlying type is expected to be <see cref="T:System.Func`2"/>.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSetReduceSettings">
            <summary>Settings of a reduce operation.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.Reducer">
            <summary>Underlying type is expected to be <see cref="T:System.Func`3"/>.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.WorkQueue">
            <summary>Name of the queue dedicated to reduction process.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReductionQueue">
            <summary>Name of the queue where the final reduction should be put.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReductionCounter">
            <summary>Suffix of the blob that contains the reduction counter.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSetReduceSettings.ReducerInQueueCounter">
            <summary>Suffix of the blob that contains a counter of number of worker.</summary>
        </member>
        <member name="T:Lokad.Cloud.Framework.BlobSet`1">
            <summary>The <c>BlobSet</c> is a blob-based scalable collection that
            provides scalable iterators (basically mappers and reducers).</summary>
            <typeparam name="T">Type being enumerated.</typeparam>
            <remarks>
            <para>The <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> should be instanciated through the
            <see cref="M:Lokad.Cloud.Framework.CloudService.GetBlobSet``1"/>. This pattern has been chosen
            because the <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> needs arguments passed to the service
            through IoC.
            </para>
            <para>All <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/>s are stored in a single blob containers.
            They are separated through the usage of a blob name prefix.
            </para>
            <para>
            Items put in a <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> are giving pseudo-random names.
            The pseudo-random pattern is used for fast iteration.
            </para>
            </remarks>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.ContainerName">
            <summary>Name of the container for all the blobsets.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.Delimiter">
            <summary>Delimiter used for prefixing iterations on Blob Storage.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.MapSettingsSuffix">
            <summary>Blob name used to store the mapping during a map operation.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.MapCounterSuffix">
            <summary>Blob name used to store the number of remaining mappings during
            a map operation.</summary>
        </member>
        <member name="F:Lokad.Cloud.Framework.BlobSet`1.ReduceCounterSuffix">
            <summary>Blob name used to store the number of remaining reductions during
            a reduce operation.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.#ctor(Lokad.Cloud.Framework.ProvidersForCloudStorage,System.String)">
            <summary>Constructor that specifies the <see cref="P:Lokad.Cloud.Framework.BlobSet`1.Prefix"/>.</summary>
            <remarks>The container name is based on the type <c>T</c>.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.MapToBlobSet``2(System.String,System.Func{`0,``0},``1)">
            <summary>Apply the specified mapping to all items of this collection.</summary>
            <param name="destPrefix">Prefix to be used for the destination <c>BlobSet</c>.</param>
            <typeparam name="U">Output type of the mapped items.</typeparam>
            <typeparam name="M">Output type of the termination message.</typeparam>
            <param name="mapper">Mapping function (should be serializable).</param>
            <param name="onCompleted">Message pushed when the mapping is completed.</param>
            <remarks>This method is asynchronous.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.MapToBlobSet``2(System.String,System.Func{`0,``0},``1,System.String)">
            <summary>Apply the specified mapping  to all items of this collection.</summary>
            <param name="destPrefix">Prefix to be used for the destination <c>BlobSet</c>.</param>
            <typeparam name="U">Output type of the mapped items.</typeparam>
            <typeparam name="M">Output type of the termination message.</typeparam>
            <param name="mapper">Mapping function (should be serializable).</param>
            <param name="onCompletedQueueName">Identifier of the queue where the termination message is put.</param>
            <remarks>
            This method is asynchronous.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.ReduceToQueue``1(System.Func{``0,``0,``0})">
            <summary>Apply a reducing function and outputs to the queue
            implicitely selected based on the type <c>U</c>.</summary>
            <typeparam name="U">Reduction type.</typeparam>
            <param name="reducer">Reducing function.</param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.ReduceToQueue``1(System.Func{``0,``0,``0},System.String)">
            <summary>Apply a reducing function and outputs to the queue specified.</summary>
            <typeparam name="U">Reduction type.</typeparam>
            <param name="reducer">Reduction type.</param>
            <param name="queueName">Identifier the output queue.</param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Add(`0)">
            <summary>Adds an item and returns the corresponding blob identifier.</summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Remove(Lokad.Cloud.Framework.BlobLocator)">
            <summary>Removes an item based on its identifier.</summary>
            <returns><c>true</c> if the blob was successfully removed and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.Clear">
            <summary>Remove all items from within the collection. Method is asynchronous,
            it returns immediately once the deletion task is queued.</summary>
            <remarks>Considering that the <see cref="T:Lokad.Cloud.Framework.BlobSet`1"/> is nothing
            but a list of prefixed blobs in a container of the Blob Storage,
            clearing the collection is equivalent to deleting the collection.
            </remarks>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.GetNewItemBlobName">
            <summary>Get a new blob name including the prefix, the pseudo-random pattern plus
            the Guid. Those names are choosen to avoid collision and facilitate fast iteration.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.RetryUpdate(System.Func{System.Boolean})">
            <summary>Retry an update method until it succeeds. Timing
            increases to avoid overstressing the storage for nothing.</summary>
            <param name="func"></param>
        </member>
        <member name="M:Lokad.Cloud.Framework.BlobSet`1.InvokeAsDelegate(System.Object,System.Object[])">
            <summary>Use reflection to invoke a delegate.</summary>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSet`1.Prefix">
            <summary>Storage prefix for this collection.</summary>
            <remarks>This identifier is used as <em>prefix</em> through the blob storage
            in order to iterate through the collection.</remarks>
        </member>
        <member name="P:Lokad.Cloud.Framework.BlobSet`1.Item(Lokad.Cloud.Framework.BlobLocator)">
            <summary>Retrieves an item based on the blob identifier.</summary>
        </member>
    </members>
</doc>
