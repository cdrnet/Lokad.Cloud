<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- =========================================================== 
       Setup the place where we look for the Windows Azure SDK 
       =========================================================== -->

  <!-- Set installation properties. These properties can be overriden to support non-default installation -->
  <PropertyGroup>
    <ServiceHostingSDKInstallDir Condition=" '$(ServiceHostingSDKInstallDir)' == '' ">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\ServiceHosting\v1.0@InstallPath)</ServiceHostingSDKInstallDir>
    <ServiceHostingSDKSupport    Condition=" '$(ServiceHostingSDKSupport)' == '' ">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\ServiceHosting\v1.0@ToolsVersionSupportLevel)</ServiceHostingSDKSupport> 
    <!-- Ensure ServiceHostingSDKInstallDir has a trailing slash, so it can be concatenated -->
    <ServiceHostingSDKInstallDir Condition=" '$(ServiceHostingSDKInstallDir)' != '' and !HasTrailingSlash('$(ServiceHostingSDKInstallDir)')">$(ServiceHostingSDKInstallDir)\</ServiceHostingSDKInstallDir>

    <ServiceHostingSDKBinDir     Condition=" '$(ServiceHostingSDKBinDir)' == '' ">$(ServiceHostingSDKInstallDir)bin\</ServiceHostingSDKBinDir>

    <ServiceHostingSDKTaskPath   Condition=" '$(ServiceHostingSDKTaskPath)' == '' ">$(ServiceHostingSDKBinDir)Microsoft.ServiceHosting.Tools.MSBuildTasks.dll</ServiceHostingSDKTaskPath>

  </PropertyGroup>

  <!-- =========================================================== 
       Bring in the CSPack MSBuild task 
       =========================================================== -->
  <UsingTask TaskName="CSPack"                AssemblyFile="$(ServiceHostingSDKTaskPath)" Condition=" Exists('$(ServiceHostingSDKTaskPath)') " />
  <UsingTask TaskName="ValidateServiceFiles"  AssemblyFile="$(ServiceHostingSDKTaskPath)" Condition=" Exists('$(ServiceHostingSDKTaskPath)') " />

  <!-- =========================================================== 
       Bring in our tasks
       =========================================================== -->
  <PropertyGroup>
    <CloudExtensionsDir       Condition=" '$(CloudExtensionsDir)' == '' ">$(MSBuildExtensionsPath)\Microsoft\Cloud Service\v1.0\</CloudExtensionsDir>

    <CloudExtensionsTaskPath  Condition=" '$(CloudExtensionsTaskPath)' == '' ">$(CloudExtensionsDir)Microsoft.CloudService.MSBuildTasks.dll</CloudExtensionsTaskPath>
  </PropertyGroup>

  <UsingTask TaskName="ItemGroupsOrderedMerge"              AssemblyFile="$(CloudExtensionsTaskPath)" />
  <UsingTask TaskName="IsolatedCSPack"                      AssemblyFile="$(CloudExtensionsTaskPath)" />
  <UsingTask TaskName="FindTargetPath"                      AssemblyFile="$(CloudExtensionsTaskPath)" />
  <UsingTask TaskName="AssociatePlatformWithRoleReferences" AssemblyFile="$(CloudExtensionsTaskPath)" />
  <UsingTask TaskName="DeleteCurrentDeployment"             AssemblyFile="$(CloudExtensionsTaskPath)" />

  <!-- =========================================================== 
       Import the Common targets file and override the standard 
       tasks that VS expects to perform a build 
       =========================================================== -->

  <!-- Import the Common targets file -->
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!-- =========================================================== 
       Property Declarations
       =========================================================== -->

  <PropertyGroup>

    <!-- The level of ToolsVersionSupportLevel this msi will support-->
    <ServiceHostingVSSupport>6</ServiceHostingVSSupport>
    <!-- Example, bin\Debug\Compute.csx\  -->
    <ServiceOutputDirectory Condition=" '$(ServiceOutputDirectory)' == '' ">$(OutDir)$(ProjectName).csx\</ServiceOutputDirectory>

    <!-- The local path where Windows Azure compiler outputs the roles -->
    <ServiceHosting_HardcodedDirectory Condition =" '$(ServiceHosting_HardcodedDirectory)' == '' ">roles\</ServiceHosting_HardcodedDirectory>

    <!-- The namespace of the service definition and service configuration xml files -->
    <ServiceDefinitionNamespace>http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition</ServiceDefinitionNamespace>
    <ServiceConfigurationNamespace>http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceConfiguration</ServiceConfigurationNamespace>

    <!-- Allow specifying explicit platform for the roles. 
         format: 
         {RoleName1}={Platform1};{RoleName2}={Platform2};...
         if the role is not specified, it will use the current project target platform.
    -->
    <WebRoleConfigPlatform    Condition=" '$(WebRoleConfigPlatform)' == '' "></WebRoleConfigPlatform>
    <WorkerRoleConfigPlatform Condition=" '$(WorkerRoleConfigPlatform)' == '' "></WorkerRoleConfigPlatform>

  </PropertyGroup>

  <!-- =========================================================== 
       Override the PrepareForBuildDependsOn property from Microsoft.Common.targets
       to the targets that are needed for the CloudExtensions target
       =========================================================== -->

  <PropertyGroup>
    <PrepareForBuildDependsOn>
      $(PrepareForBuildDependsOn);
      CloudServicePrepareForBuild
    </PrepareForBuildDependsOn>
  </PropertyGroup>

  <!-- =============== BuiltProjectOutputGroupKeyOutput removal ============ 
       Removing the BuiltProjectOutputGroupKeyOutput since the Cloud Service
       Project does not support any Key outputs or OutputGroups
       =========================================================== -->

  <Target Name="CloudServicePrepareForBuild">

    <ItemGroup>
      <BuiltProjectOutputGroupKeyOutput Remove="@(BuiltProjectOutputGroupKeyOutput)" />
    </ItemGroup>
    
  </Target>
  
  <!-- =========================================================== 
       Override the CoreBuildDependsOn property from Microsoft.Common.targets
       to the targets that are needed for the CloudExtensions target
       =========================================================== -->

  <PropertyGroup>
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      PackageComputeService;
      GetTargetPath;
      IncrementalClean;
      PostBuildEvent
    </CoreBuildDependsOn>
  </PropertyGroup>


  <!-- =============== PackageComputeService ======================================== 
       Packages the compute service project
       ============================================================================== -->
  <PropertyGroup>
    <PackageComputeServiceDependsOn>
      BeforePackageComputeService;
      CorePackageComputeService;
      AfterPackageComputeService;
    </PackageComputeServiceDependsOn>
  </PropertyGroup>
  <Target
      Name="PackageComputeService"
      DependsOnTargets="$(PackageComputeServiceDependsOn)" />

  <!-- Redefine this target in your project in order to run tasks just before Build -->
  <Target Name="BeforePackageComputeService" />

  <!-- Redefine this target in your project in order to run tasks just before Build -->
  <Target Name="AfterPackageComputeService" />

  <!-- =============== CorePackageComputeService ==================================== 
       This is the core packaging target. It uses CSPack task to package the compute
       project. 
       ============================================================================== -->
  <PropertyGroup>
    <CorePackageComputeServiceDependsOn>
      VerifySDKInstallation;
      FindServiceDefinition;
      FindServiceConfiguration;
      ResetTargetNames;
      ValidateComputeProject;
      DeleteCurrentDeployment;
      ResolveRoleReferences;
    </CorePackageComputeServiceDependsOn>
  </PropertyGroup>
  <Target
      Name="CorePackageComputeService"
      DependsOnTargets="$(CorePackageComputeServiceDependsOn)">

    <Message Text="Start - PackageComputeService" />
    <Message Text="ServiceHostingSDKInstallDir is $(ServiceHostingSDKInstallDir)" />

    <ItemGroup>
      <Roles Include="@(RoleReferences->'%(OutputDir)')" >
        <RoleName>%(RoleName)</RoleName>
        <EntryPoint>%(EntryPoint)</EntryPoint>
        <SourceDir>%(SourceDir)</SourceDir>
      </Roles>
    </ItemGroup>

    <Message Text="ModelFile            is @(ServiceDefinition)" />
    <Message Text="OutputDirectory      is $(ServiceOutputDirectory)" />
    <Message Text="PackRoles            is @(Roles), Name=%(RoleName), EntryPoint=%(EntryPoint), SourceDir=%(SourceDir)" />

    <Message Text="Calling ServicePack" />

    <CSPack
      ServiceDefinitionFile="@(ServiceDefinition)"
      Output="$(ServiceOutputDirectory)"
      PackRoles="@(Roles)"
      CopyOnly="true"
     >
      <Output TaskParameter="OutputFiles" ItemName="FileWrites" />
    </CSPack>

    <!-- Add generated policy files and others to the FileWrites list -->
    <ItemGroup>
      <FileWrites Include=" $(ServiceOutputDirectory)**\__entrypoint.txt " />
    </ItemGroup>

    <!-- Copy service configuration to output directory -->
    <Message Text="Copying the service configuration." />
    <Copy
      SourceFiles="@(ServiceConfiguration)"
      DestinationFolder="$(OutDir)"
     >
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>

    <Message Text="End - PackageComputeService" />

  </Target>


  <!-- =============== VerifySDKInstallation ======================================== 
       Verify that the Computing SDK is installed and it is compatible with this version of tools
       ============================================================================== -->
  <Target 
      Name="VerifySDKInstallation">

    <Error Condition=" !Exists('$(ServiceHostingSDKInstallDir)') or 
                       !Exists('$(ServiceHostingSDKBinDir)') or 
                       !Exists('$(ServiceHostingSDKTaskPath)') "
          Text="Failed to locate the Windows Azure SDK. Please make sure the Windows Azure SDK v1.1 is installed." />

    <Error Condition="'$(ServiceHostingSDKSupport)' != '$(ServiceHostingVSSupport)'" Code="WAT050" HelpKeyword="SDKVersionNotSupported"
          Text="The version of the Windows Azure SDK currently installed is not compatible with this version of Windows Azure Tools for Microsoft Visual Studio.  Please download and install the latest version of both the Windows Azure SDK and the Windows Azure Tools for Microsoft Visual Studio"/>
    
  </Target>

  <!-- =============== FindServiceDefinition  ============================================ 
       Finds the service definition in the project and raises an error if it is not found. 
       ============================================================================== -->
  <Target 
      Name="FindServiceDefinition">

    <!--Find the Compute Application Model File -->
    <Message Text="ServiceDefinition in @(ServiceDefinition)" Importance="normal"/>

    <Error Condition=" '@(ServiceDefinition)' == '' "
           Text="No service definition file has been specified"
           Code="WAT010"
           HelpKeyword="MissingModelFile"/>

    <!-- Only one active service definition can be active, check for that and throw an error -->
    <Error Condition=" '@(ServiceDefinition)' == '' or '@(ServiceDefinition->'%(dummy)')' != '' "
           Text="Only one service definition can be active."
           Code="WAT020"
           HelpKeyword="OneActiveModelFile" />

  </Target>

  <!-- =============== FindServiceConfiguration  ============================================ 
       Finds the Service Configuration file in the project and raises an error if it is not found. 
       ============================================================================== -->
  <Target 
      Name="FindServiceConfiguration">

    <Message Text="ServiceConfigurationFile is @(ServiceConfiguration)" />

    <!-- Compute project must contain at least one service configuration file -->
    <Error Condition=" '@(ServiceConfiguration)' == '' "
           Text="No service configuration file has been specified"
           Code="WAT030"
           HelpKeyword="MissingServiceConfiguration"/>

    <!-- Only one service configuration per compute project, check for that and throw an error -->
    <Error Condition=" '@(ServiceConfiguration)' == '' or '@(ServiceConfiguration->'%(dummy)')' != '' "
           Text="Only one Service Configuration file per Compute project."
           Code="WAT040"
           HelpKeyword="OneServiceConfigurationFile" />

  </Target>


  <!-- =============== ResetTargetNames  ==================================== 
       Resets the $(TargetName) and $(TargetExt) to be compute specific.

       Properties:
           TargetName - the name of the compute app model file 
           TargetExt  - the extension of the compute app model file 
       ========================================================================== -->
  <Target 
      Name="ResetTargetNames">

    <PropertyGroup>
      <TargetDir>$(ServiceOutputDirectory)</TargetDir>
      <TargetName>@(ServiceDefinition->'%(filename)')</TargetName>
      <TargetExt>.rd</TargetExt>
      <TargetFileName>$(TargetName)$(TargetExt)</TargetFileName>
      <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
    </PropertyGroup>

    <Message Text="Reset the targetDir      to $(TargetDir)" />
    <Message Text="Reset the TargetName     to $(TargetName)" />
    <Message Text="Reset the TargetExt      to $(TargetExt)" />
    <Message Text="Reset the TargetFileName to $(TargetFileName)" />
    <Message Text="Reset the TargetPath     to $(TargetPath)" />

  </Target>

  <!-- =============== DeleteCurrentDeployment ================================== 
       Delete the current running deployment that is attached with the project.

       ========================================================================== -->

  <Target
      Name="DeleteCurrentDeployment">

    <!-- This task runs only under Visual Studio -->
    <DeleteCurrentDeployment Condition="'$(BuildingInsideVisualStudio)' == 'true' " />

  </Target>

  <!-- =============== ResolveRoleReferences ======================== 
       Finds the role projects defined in the project file.      

       [OUT]
       
       RoleReferences: (item) list of all project references for
            web and worker. Each item contains these properties:
              - @         : Path to the project file.
              - RoleType  : The type of the role: Web, or Worker.
              - RoleName  : The name of the role.
              - ProjectName: The project name of the role.
              - Platform  : CPU Platform of the role project.
              - OutputDir : The path where we can find the outputs of the role.
              - SourceDir : (web specific) The source location of the web role.
              - EntryPoint: The entry point assembly file name for web/worker role.
              
      ========================================================================== -->
  <PropertyGroup>
    <ResolveRoleReferencesDependsOn>
      VerifyRoleReferences;
      ResolveWebRoleReferences;
      ResolveWorkerRoleReferences;
    </ResolveRoleReferencesDependsOn>
  </PropertyGroup>
  <Target 
      Name="ResolveRoleReferences" 
      DependsOnTargets="$(ResolveRoleReferencesDependsOn)">

    <!-- Combine WebRoleReferences and WorkerRoleReferences -->
    <ItemGroup>
      <RoleReferences Include="@(WebRoleReferences); @(WorkerRoleReferences)" />
    </ItemGroup>

    <Message Text="Role = @(RoleReferences), role=%(RoleType), projname=%(ProjectName), output=%(OutputDir)" />

  </Target>

  <!-- =============== VerifyRoleReferences ======================== 
       Verifies that the key output exists for all role references 

      ========================================================================== -->
  <Target
      Name="VerifyRoleReferences">

    <Error
      Condition=" !Exists('%(_ResolvedProjectReferencePaths.Identity)')"
      Text="The referenced assembly %(_ResolvedProjectReferencePaths.Identity) was not found. Please make sure to build the role project that produces this assembly before building this Cloud Service Project."
      ContinueOnError="false"/>
  </Target>


  <!-- =============== ResolveWebRoleReferences ======================== 
       Resolves the web role references

       [OUT]
       
       WebRoleReferences: (item) list of all project references for web
              - @         : Path to the project file.
              - RoleType  : The type of the role: Web
              - RoleName  : The name of the role.
              - ProjectName: The project name of the role.
              - Platform  : CPU Platform of the role project.
              - OutputDir : The path where we can find the outputs of the role.
              - SourceDir : The source location of the web role
              - EntryPoint: The entry point assembly file name for web.
              
      ========================================================================== -->
  <Target 
      Name="ResolveWebRoleReferences">

    <Message Text="WebRoleConfigPlatform=$(WebRoleConfigPlatform)" />

    <!-- Get all the roles from the project references section -->
    <ItemGroup>
      <WebRoleReferences Include="@(ProjectReference->'%(Identity)')" Condition=" '%(RoleType)' == 'Web' " >
        <RoleType>%(RoleType)</RoleType>
        <RoleName>%(Name)</RoleName>
        <ProjectName>%(Name)</ProjectName>
      </WebRoleReferences>
    </ItemGroup>

    <AssociatePlatformWithRoleReferences
      RoleReferences="@(WebRoleReferences)"
      PlatformList="$(WebRoleConfigPlatform)"
      DefaultPlatform="$(Platform)"
      >
      <Output TaskParameter="RoleReferencesWithPlatform" ItemName="WebRoleReferencesWithPlatform" />
    </AssociatePlatformWithRoleReferences>
    <ItemGroup>
      <WebRoleReferences Remove="@(WebRoleReferences)" />
      <WebRoleReferences Include="@(WebRoleReferencesWithPlatform)" />
    </ItemGroup>

    <!-- Get the fullpath of the Compute intermediate output path to pass to MSBuild bellow -->
    <ItemGroup>
      <IntermediateOutputPathItem Include="$(IntermediateOutputPath)" />
    </ItemGroup>
    <PropertyGroup>
      <IntermediateOutputFullPath>@(IntermediateOutputPathItem->'%(FullPath)')</IntermediateOutputFullPath>
    </PropertyGroup>

    <Message Text="Web = @(WebRoleReferences), role=%(RoleType), projname=%(ProjectName)" />

    <!-- Get the output path of the web role -->
    <MSBuild
      Condition=" '@(WebRoleReferences)' != '' "
      Projects="@(WebRoleReferences)"
      Targets="GetTargetPath"
      Properties="Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="WebTargetPathItem" />
    </MSBuild>

    <!-- Include the WebEntryPoint metadata into every item of WebRoleReferences -->
    <ItemGroupsOrderedMerge
      Condition=" '@(WebRoleReferences)' != '' "
      MainList="@(WebRoleReferences)"
      Values="@(WebTargetPathItem->'%(filename)%(extension)')"
      MetadataName="WebEntryPoint"
      >
      <Output TaskParameter="OutputList" ItemName="WebRoleReferencesWithEntryPoint" />
    </ItemGroupsOrderedMerge>

    <!-- Include the TargetDir metadata into every item of WebRoleReferencesWithEntryPoint -->
    <ItemGroupsOrderedMerge
      Condition=" '@(WebRoleReferencesWithEntryPoint)' != '' "
      MainList="@(WebRoleReferencesWithEntryPoint)"
      Values="@(WebTargetPathItem->'%(RootDir)%(Directory)')"
      MetadataName="TargetDir"
      >
      <Output TaskParameter="OutputList" ItemName="WebRoleReferencesWithTargetPath" />
    </ItemGroupsOrderedMerge>
    
    <!-- Set WebRoleReferences from WebRoleReferencesWithTargetPath -->
    <ItemGroup Condition=" '@(WebRoleReferences)' != '' " >
      <WebRoleReferences Remove="@(WebRoleReferences)" />
      <WebRoleReferences Include="@(WebRoleReferencesWithTargetPath)" />
    </ItemGroup>

    <!-- Before we trigger the web project publish, make sure we clean the _PublishedWebsites folder.
         Delete files first then delete the container folder. -->
    <ItemGroup Condition=" '@(WebRoleReferences)' != '' ">
      <PublishedWebsiteFilesToDelete Include="%(WebRoleReferences.TargetDir)_PublishedWebsites\**\*.*" />
    </ItemGroup>
    <Delete Files="@(PublishedWebsiteFilesToDelete)" ContinueOnError="true" TreatErrorsAsWarnings="true" />
    <RemoveDir Condition=" '@(WebRoleReferences)' != '' And Exists('%(TargetDir)_PublishedWebsites')  "
               Directories="%(TargetDir)_PublishedWebsites" ContinueOnError="true" />

    <!-- Call the prepare for run target with build at the same location of the web project.
         This will make sure the build is bypassed because files are up to date, and this 
         will only generate the _PublishedWebsites folder. 
         
         Set UseHostCompilerIfAvailable to false to make sure that the up to date check on
         the CoreCompile target is done using its inputs and outputs instead of the 
         Csc host object for Visual Studio.
    -->
    <MSBuild
      Condition=" '@(WebRoleReferences)' != '' "
      Projects="@(WebRoleReferences)"
      Targets="Build;PrepareForRun"
      Properties="OutDir=%(TargetDir); Configuration=$(Configuration); Platform=%(Platform); UseHostCompilerIfAvailable=false"
      ContinueOnError="false"
      >
    </MSBuild>

    <Error Condition=" '@(WebRoleReferences)' != '' And !Exists('%(TargetDir)_PublishedWebsites') " Text="Web Role project %(FullPath) does not import Microsoft.WebApplication.targets.  The Web Role must be a Web Application that imports Microsoft.WebApplication.targets." Code="WAT060" HelpKeyword="MissingWebApplicationTargets"/>

    <!-- Set the projected output directory on the web role -->
    <ItemGroup Condition=" '@(WebRoleReferences)' != '' " >
      <WebRoleReferences>
        <OutputDir>$(IntermediateOutputFullPath)%(ProjectName)\</OutputDir>
        <SourceDir>%(RootDir)%(Directory)</SourceDir>
        <!-- Stores the assembly file name (no path) of the web role -->
        <EntryPoint>%(WebEntryPoint)</EntryPoint>
      </WebRoleReferences>
    </ItemGroup>

    <!-- Remove the intermediate webrole output folders, to start on clean always -->
    <RemoveDir Condition=" '@(WebRoleReferences)' != '' "
               Directories="%(WebRoleReferences.OutputDir)" />
    
    <!-- Move the published site from the site's target path to the intermediate folder in the cloud project -->
    <ItemGroup Condition=" '@(WebRoleReferences)' != '' ">
      <PublishedWebsitesFiles Include="%(WebRoleReferences.TargetDir)_PublishedWebsites\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(PublishedWebsitesFiles)"
          DestinationFiles="$(IntermediateOutputFullPath)%(RecursiveDir)%(Filename)%(Extension)" />
    <RemoveDir Condition=" '@(WebRoleReferences)' != '' And Exists('%(TargetDir)_PublishedWebsites') "
               Directories="%(TargetDir)_PublishedWebsites" ContinueOnError="true" />

    <!-- Register intermediate published websites for Clean -->
    <ItemGroup Condition=" '@(WebRoleReferences)' != '' ">
      <FileWrites Include="%(WebRoleReferences.OutputDir)**\*.*" />
    </ItemGroup>

  </Target>

  <!-- =============== ResolveWorkerRoleReferences ======================== 
       Resolves the worker role references

       [OUT]
       WorkerRoleReferences: (item) list of all project references for worker
              - @         : Path to the project file.
              - RoleType  : The type of the role: Worker
              - RoleName  : The name of the role.
              - ProjectName: The project name of the role.
              - Platform  : CPU Platform of the role project.
              - OutputDir : The path where we can find the outputs of the role.
              - SourceDir : not used
              
      ========================================================================== -->
  <Target 
      Name="ResolveWorkerRoleReferences">

    <Message Text="WorkerRoleConfigPlatform=$(WorkerRoleConfigPlatform)" />

    <!-- Get all the roles from the project references section -->
    <ItemGroup>
      <WorkerRoleProjects Include="@(ProjectReference->'%(Identity)')" Condition=" '%(RoleType)' == 'Worker' " >
        <ProjectName>%(Name)</ProjectName>
      </WorkerRoleProjects>
    </ItemGroup>

    <MSBuild
      Condition=" '@(WorkerRoleProjects)' != '' "
      Projects="$(MSBuildProjectFullPath)"
      Targets="ResolveSingleWorkerRoleReference"
      Properties="WorkerRoleProject=%(Identity);WorkerRoleProjectName=%(Name)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="WorkerRoleReferences" />
    </MSBuild>

    <Message Text="WorkerRoleReferences=@(WorkerRoleReferences) %(RoleType), %(RoleName), %(ProjectName), %(Platform), %(OutputDir), %(EntryPoint)" />

    <!-- Register intermediate published worker role for Clean -->
    <ItemGroup Condition=" '@(WorkerRoleReferences)' != '' ">
      <FileWrites Include="%(WorkerRoleReferences.OutputDir)**\*.*" />
    </ItemGroup>

  </Target>

  <!-- =============== ResolveSingleWorkerRoleReference ======================== 
       Resolves a single worker role reference. This target publishes the worker
       role into an intermediate folder making it ready for CSPack.
       
       [IN]
       
       WorkerRoleProject: (property) the propject of worker role
       WorkerRoleProjectName: (property) the project name of the worker role

       [OUT]
       
       WorkerRoleReference: (item) Contains information about the worker role
              - @         : Path to the project file, same as $(WorkerRoleProject)
              - RoleType  : The type of the role: Worker
              - RoleName  : The name of the role.
              - ProjectName: The project name of the role, same as $(WorkerRoleProjectName)
              - Platform  : CPU Platform of the role project.
              - OutputDir : The path where we can find the outputs of the role.
              - EntryPoint: The entry point assembly file name for the role.
              - SourceDir : not used
              
      ========================================================================== -->
  <Target 
      Name="ResolveSingleWorkerRoleReference"
      Condition=" '$(WorkerRoleProject)' != '' and '$(WorkerRoleProjectName)' != '' "
      Outputs="@(WorkerRoleReference)">

    <Message Text="WorkerRoleProject=$(WorkerRoleProject)" />

    <ItemGroup>
      <WorkerRoleReference Include="$(WorkerRoleProject)">
        <RoleType>Worker</RoleType>
        <RoleName>$(WorkerRoleProjectName)</RoleName>
        <ProjectName>$(WorkerRoleProjectName)</ProjectName>
        <!-- worker doesn't use SourceDir, set it to empty as default -->
        <SourceDir></SourceDir>
      </WorkerRoleReference>
    </ItemGroup>

    <AssociatePlatformWithRoleReferences
      RoleReferences="@(WorkerRoleReference)"
      PlatformList="$(WorkerRoleConfigPlatform)"
      DefaultPlatform="$(Platform)"
      >
      <Output TaskParameter="RoleReferencesWithPlatform" ItemName="WorkerRoleReferenceWithPlatform" />
    </AssociatePlatformWithRoleReferences>
    <ItemGroup>
      <WorkerRoleReference Remove="@(WorkerRoleReference)" />
      <WorkerRoleReference Include="@(WorkerRoleReferenceWithPlatform)" />
    </ItemGroup>

    <!-- Setup the intermediate path where we want to publish the worker role -->
    <ItemGroup>
      <IntermediateWorkerOutputPathItem Include="$(IntermediateOutputPath)%(WorkerRoleReference.ProjectName)\" />
    </ItemGroup>
    <PropertyGroup>
      <IntermediateWorkerOutputPath>@(IntermediateWorkerOutputPathItem->'%(Fullpath)')</IntermediateWorkerOutputPath>
    </PropertyGroup>

    <!-- ===============================
         Get the target path for the role 
         =============================== -->
    <MSBuild
      Projects="@(WorkerRoleReference)"
      Targets="GetTargetPath"
      Properties="Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="WorkerTargetPathItem" />
    </MSBuild>

    <PropertyGroup>
      <!-- Stores the worker target directory -->
      <WorkerTargetDir Condition="'@(WorkerTargetPathItem)'!=''">%(RootDir)%(Directory)</WorkerTargetDir>
      <!-- Stores the assembly file name (no path) of the worker role -->
      <WorkerEntryPoint Condition="'@(WorkerTargetPathItem)'!=''">%(Filename)%(Extension)</WorkerEntryPoint>
    </PropertyGroup>

    <!--  =============================== 
          Get all the output groups for the role 
           =============================== -->
    <MSBuild
      Projects="@(WorkerRoleReference)"
      Targets="
        BuiltProjectOutputGroup;
        DebugSymbolsProjectOutputGroup;
        DocumentationProjectOutputGroup;
        SatelliteDllsProjectOutputGroup;
        SGenFilesOutputGroup"
      Properties="AddAppConfigToBuildOutputs=true; Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="OutputGroups" />
    </MSBuild>

    <Message Text="Output=%(OutputGroups.Identity) -> %(TargetPath)" />

    <ItemGroup>
      <WorkerFiles Include="@(OutputGroups)" Condition=" '@(OutputGroups)' != '' " >
        <TargetPath>%(TargetPath)</TargetPath>
      </WorkerFiles>
    </ItemGroup>

    <!-- ===============================
         Get all the dependency output groups for the role 
         =============================== -->
    <MSBuild
      Projects="@(WorkerRoleReference)"
      Targets="
        BuiltProjectOutputGroupDependencies;
        DebugSymbolsProjectOutputGroupDependencies;
        DocumentationProjectOutputGroupDependencies;
        SGenFilesOutputGroupDependencies"
      Properties="Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="OutputGroupsDependencies" />
    </MSBuild>

    <Message Text="OutputDependencies=%(OutputGroupsDependencies.Identity)" />

    <!-- Figure out the dependencies that need to be copied by checking if the dependency exists
         in the worker target directory. -->
    <ItemGroup>
      <CopyLocalDependencies Include="@(OutputGroupsDependencies)" Condition="Exists('$(WorkerTargetDir)%(Filename)%(Extension)')" />
    </ItemGroup>
    <Message Text="CopyLocalDependencies=%(CopyLocalDependencies.Identity)" />
    <ItemGroup>
      <WorkerFiles Include="@(CopyLocalDependencies)" Condition=" '@(CopyLocalDependencies)' != '' " >
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </WorkerFiles>
    </ItemGroup>

    <!--  ===============================
          Get all Satellite dependecies 
          =============================== -->
    <MSBuild
      Projects="@(WorkerRoleReference)"
      Targets="
        SatelliteDllsProjectOutputGroupDependencies"
      Properties="Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="SatelliteOutputGroupsDependencies" />
    </MSBuild>

    <FindTargetPath
      Files="@(SatelliteOutputGroupsDependencies)"
      FindUnderTargetDir="$(WorkerTargetDir)"
      >
      <Output TaskParameter="ItemWithTargetPath" ItemName="SatelliteOutputGroupsDependenciesWithTargetPath" />
    </FindTargetPath>

    <Message Text="SatelliteOutputGroupsDependenciesWithTargetPath=@(SatelliteOutputGroupsDependenciesWithTargetPath), %(TargetPath)" />

    <ItemGroup>
      <WorkerFiles Include="@(SatelliteOutputGroupsDependenciesWithTargetPath)" Condition=" '@(SatelliteOutputGroupsDependenciesWithTargetPath)' != '' ">
        <TargetPath>%(TargetPath)</TargetPath>
      </WorkerFiles>
    </ItemGroup>

    <!-- ===============================
         Get all the CopyToOutput items from the role 
         =============================== -->
    <MSBuild
      Projects="@(WorkerRoleReference)"
      Targets="
        GetCopyToOutputDirectoryItems"
      Properties="Configuration=$(Configuration); Platform=%(Platform)"
      ContinueOnError="false"
      >
      <Output TaskParameter="TargetOutputs" ItemName="CopyToOutputItems" />
    </MSBuild>

    <Message Text="CopyToOutputItems=%(CopyToOutputItems.Identity) -> %(TargetPath)" />

    <ItemGroup>
      <WorkerFiles Include="$(WorkerTargetDir)%(TargetPath)" Condition=" '@(CopyToOutputItems)' != '' ">
        <TargetPath>%(TargetPath)</TargetPath>
      </WorkerFiles>
    </ItemGroup>

    <Message Text="WorkerFiles=%(WorkerFiles.Identity) -> %(TargetPath)" />

    <!-- ===============================
         At this point the WorkerFiles list is ready, just publish the Worker
         =============================== -->

    <!-- Make sure the intermediate worker ouput folder is created -->
    <MakeDir Directories="$(IntermediateWorkerOutputPath)" />

    <!-- Remove the files located under the intermediate output folder that are orphaned.
         In other words, remove those files that are not part of the worker project anymore.
         For example, the user renamed a file from test1.dll to test2.dll.
    -->
    <ItemGroup>
      <OrphanedWorkerFiles Include="$(IntermediateWorkerOutputPath)**\*.*" Exclude="@(WorkerFiles->'$(IntermediateWorkerOutputPath)%(TargetPath)')" />
    </ItemGroup>
    <Delete Files="@(OrphanedWorkerFiles)" ContinueOnError="true" />

    <!-- Publish the worker to the intermediate folder -->
    <Copy
      Condition=" '@(WorkerFiles)' != '' "
      SourceFiles="@(WorkerFiles)"
      DestinationFiles="@(WorkerFiles->'$(IntermediateWorkerOutputPath)%(TargetPath)')"
      SkipUnchangedFiles="true" />

    <!-- Add OutputDir and EntryPoint metadata to the WorkerRoleReference item group -->
    <ItemGroup>
      <WorkerRoleReference>
        <OutputDir>$(IntermediateWorkerOutputPath)</OutputDir>
        <EntryPoint>$(WorkerEntryPoint)</EntryPoint>
      </WorkerRoleReference>
    </ItemGroup>

    <Message Text="WorkerRoleReference=@(WorkerRoleReference) %(RoleType), %(RoleName), %(ProjectName), %(Platform), %(OutputDir), %(EntryPoint)" />

  </Target>

  <!-- =============== ValidateComputeProject ===================================== 
       Runs validations on the compute project to verify it's valid
       ============================================================================ -->
  <PropertyGroup>
    <ValidateComputeProjectDependsOn>
      ValidateRoleProjects;
      ValidateServiceFiles;
    </ValidateComputeProjectDependsOn>
  </PropertyGroup>
  <Target 
      Name="ValidateComputeProject"
      DependsOnTargets="$(ValidateComputeProjectDependsOn)">
  </Target>

  <!-- =============== ValidateRoleProjects ======================================= 
       Validates that we have the right number of role projects to match the 
       declared application architecture. Generates errors if these are not correct
       ============================================================================ -->
  <Target 
      Name="ValidateRoleProjects">

    <CreateItem Include="@(ProjectReference)" Condition=" '%(RoleType)' == 'Web' " >
      <Output TaskParameter="Include" ItemName="WebRoles" />
    </CreateItem>

    <CreateItem Include="@(ProjectReference)" Condition=" '%(RoleType)' == 'Worker' " >
      <Output TaskParameter="Include" ItemName="WorkerRoles" />
    </CreateItem>

    <Message Text="Web Project        is @(WebRoles)" />
    <Message Text="Worker Project     is @(WorkerRoles)" />

    <!-- Error out if unknown architecture or we don't have enough role projects for the architecture type -->
    <Error Condition=" '@(WebRoles)'=='' And '@(WorkerRoles)'=='' " Text="A Web or Worker project is required but could not be found" Code="WAT001" HelpKeyword="MissingWebOrWorkerRole"/>

  </Target>


  <!-- =============== ValidateServiceFiles ========================================= 
       Validates the integrity of both the definition file and the configuration files.       
       ============================================================================== -->
  <Target 
      Name="ValidateServiceFiles">

    <ValidateServiceFiles
        ServiceDefinitionFile="@(ServiceDefinition)"
        ServiceConfigurationFile="@(ServiceConfiguration)">
    </ValidateServiceFiles>

  </Target>


  <!-- =============== CreateManifestResourceNames ================================ 
       The IDE is calling into this target. We don't have any resource files. 
       So, implement this target to do nothing
       ============================================================================ -->

  <Target Name="CreateManifestResourceNames" />

  <!-- =============== CorePublish ================================================
       Builds the project(s) but in single-file-package mode (i.e., does not specify
       the /copyonly parameter to cspack) and copies the generated output to the 
       publish folder.
       ============================================================================ -->

  <!-- Overriding the PublishDependsOn list from common targets. -->
  <PropertyGroup>
    <PublishDependsOn>
      BeforePublish;
      CorePublish;
      AfterPublish
    </PublishDependsOn>
  </PropertyGroup>

  <Target 
      Name="CorePublish" 
      DependsOnTargets="Build">

    <Message Text="Publishing starting..." />

    <Message Text="Publishing to '$(OutDir)Publish'" />

    <MakeDir Directories=" $(OutDir)Publish " />

    <IsolatedCSPack
      ServiceHostingTasksPath="$(ServiceHostingSDKTaskPath)"
      ServiceDefinitionFile="@(ServiceDefinition)"
      Output="$(OutDir)Publish\$(ProjectName).cspkg"
      PackRoles="@(Roles)"
      CopyOnly="false"
      >
    </IsolatedCSPack>

    <!-- Copy service configuration to output directory -->
    <Message Text="Copying the service configuration file." />

    <Copy SourceFiles="@(ServiceConfiguration)" DestinationFolder="$(OutDir)Publish" />

    <Message Text="Publishing process has completed."/>

  </Target>

  <!-- ===================== OutputGroup removal ================= 
       Removing all OutputGroups since the Cloud Service
       Project does not support any Key outputs or OutputGroups
       =========================================================== -->

  <Target Name="BuiltProjectOutputGroup" DependsOnTargets="$(BuiltProjectOutputGroupDependsOn)" />
  <Target Name="ContentFilesProjectOutputGroup" DependsOnTargets="$(ContentFilesProjectOutputGroupDependsOn)" />
  <Target Name="SatelliteDllsProjectOutputGroup" DependsOnTargets="$(SatelliteDllsProjectOutputGroupDependsOn)" />
  <Target Name="DocumentationProjectOutputGroup" DependsOnTargets="$(DocumentationProjectOutputGroupDependsOn)" />
  <Target Name="DebugSymbolsProjectOutputGroup" DependsOnTargets="$(DebugSymbolsProjectOutputGroupDependsOn)" />
  <Target Name="SourceFilesProjectOutputGroup" DependsOnTargets="$(SourceFilesProjectOutputGroupDependsOn)" />
  <Target Name="SGenFilesOutputGroup" DependsOnTargets="$(SGenFilesOutputGroupDependsOn)" />
  
  <!-- =========================================================== 
       Override CoreCleanDependsOn property from Microsoft.Common.targets
       to allow us to Delete the current deployment
       =========================================================== -->

  <PropertyGroup>
    <CoreCleanDependsOn>
      DeleteCurrentDeployment;
      $(CoreCleanDependsOn)
    </CoreCleanDependsOn>
  </PropertyGroup>

</Project>
